#include "viewimportswcfromfile.h"
#include "ui_ViewImportSwcFromFile.h"
#include <QFileDialog>
#include <QStandardPaths>
#include "src/swcio/SwcReader.h"
#include "Message/Request.pb.h"
#include "src/framework/service/CachedProtoData.h"
#include "src/framework/service/WrappedCall.h"

ViewImportSwcFromFile::ViewImportSwcFromFile(QWidget *parent) :
    QDialog(parent), ui(new Ui::ViewImportSwcFromFile) {
    ui->setupUi(this);

    ui->SwcFileInfo->clear();
    ui->SwcFileInfo->setColumnCount(5);
    QStringList headerLabels;
    headerLabels
            << "Swc FilePath"
            << "Type"
            << "Detected Swc Node Number"
            << "New Name"
            << "Import Status";
    ui->SwcFileInfo->setHorizontalHeaderLabels(headerLabels);
    ui->SwcFileInfo->resizeColumnsToContents();

    connect(ui->SelectBtn,&QPushButton::clicked,this,[this](){
        QFileDialog fileDialog(this);
        fileDialog.setWindowTitle("Select Swc Files");
        fileDialog.setDirectory(QStandardPaths::writableLocation(QStandardPaths::HomeLocation));
        fileDialog.setNameFilter(tr("File(*.swc *.eswc)"));
        fileDialog.setFileMode(QFileDialog::ExistingFiles);
        fileDialog.setViewMode(QFileDialog::Detail);

        m_SwcList.clear();
        m_ESwcList.clear();

        QStringList fileNames;
        if (fileDialog.exec()) {
            fileNames = fileDialog.selectedFiles();
            ui->SwcFileInfo->setRowCount(fileNames.size());
            for(int i=0; i< fileNames.size(); i++){
                std::filesystem::path filePath(fileNames[i].toStdString());
                if(filePath.extension() == ".swc"){
                    Swc swc(filePath.string());
                    auto neuron = swc.getNeuron();
                    m_SwcList.emplace_back(swc);

                    ui->SwcFileInfo->setItem(i, 0,
                                             new QTableWidgetItem(QString::fromStdString(filePath.string())));
                    ui->SwcFileInfo->setItem(i, 1,
                                             new QTableWidgetItem("swc"));
                    ui->SwcFileInfo->setItem(i, 2,
                                             new QTableWidgetItem(QString::fromStdString(std::to_string(neuron.size()))));
                    ui->SwcFileInfo->setItem(i, 3,
                                             new QTableWidgetItem(QString::fromStdString(filePath.filename().string())));
                    ui->SwcFileInfo->setItem(i, 4,
                                             new QTableWidgetItem(QString::fromStdString("Unprocessed")));
                    
                }else if(filePath.extension() == ".eswc"){
                    ESwc eSwc(filePath.string());
                    auto neuron = eSwc.getNeuron();
                    m_ESwcList.emplace_back(eSwc);

                    ui->SwcFileInfo->setItem(i, 0,
                                             new QTableWidgetItem(QString::fromStdString(filePath.string())));
                    ui->SwcFileInfo->setItem(i, 1,
                                             new QTableWidgetItem("eswc"));
                    ui->SwcFileInfo->setItem(i, 2,
                                             new QTableWidgetItem(QString::fromStdString(std::to_string(neuron.size()))));
                    ui->SwcFileInfo->setItem(i, 3,
                                             new QTableWidgetItem(QString::fromStdString(filePath.filename().string())));
                    ui->SwcFileInfo->setItem(i, 4,
                                             new QTableWidgetItem(QString::fromStdString("Unprocessed")));
                }
            }
        }

    });

    connect(ui->ImportBtn,&QPushButton::clicked,this,[this]() {
        if (ui->SwcFileInfo->rowCount() != m_SwcList.size() + m_ESwcList.size()) {
            QMessageBox::critical(this, "Error", "Data outdated! Please reopen this import window!");
            return;
        }

        if(m_ActionImportComplete){
            QMessageBox::information(this, "Warning", "Import action has completed! Please reopen this import window if you want to import more data!");
            return;
        }

        for (int i = 0; i < m_SwcList.size(); i++) {
            auto  swcName = ui->SwcFileInfo->item(i, 3)->text().toStdString();
            std::string description = "Auto Generated By SwcManagerClient.";
            proto::CreateSwcResponse response;
            if (WrappedCall::createSwcMeta(swcName, description, response, this)) {
                proto::SwcDataV1 swcData;
                auto& newSwcRawData = m_SwcList[i].getNeuron();
                for(auto & j : newSwcRawData){
                    auto *newData = swcData.add_swcdata();
                    auto internalData = newData->mutable_swcnodeinternaldata();
                    internalData->set_n(j.n);
                    internalData->set_type(j.type);
                    internalData->set_x(j.x);
                    internalData->set_y(j.y);
                    internalData->set_z(j.z);
                    internalData->set_radius(j.radius);
                    internalData->set_parent(j.parent);
                    internalData->set_seg_id(j.seg_id);
                    internalData->set_level(j.level);
                    internalData->set_mode(j.mode);
                    internalData->set_timestamp(j.timestamp);
                    internalData->set_feature_value(j.feature_value);
                }

                proto::CreateSwcNodeDataResponse response1;
                if(WrappedCall::addSwcNodeData(swcName, swcData, response1, this)){
                    ui->SwcFileInfo->item(i, 4)->setText("Import Success!");
                    ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 2)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 3)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 4)->setBackground(QBrush(Qt::green));
                }else{
                    ui->SwcFileInfo->item(i, 4)->setText("Create Swc Node failed!");
                    ui->SwcFileInfo->item(i, 0)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 2)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 3)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 4)->setBackground(QBrush(Qt::red));
                }
            }else{
                ui->SwcFileInfo->item(i, 4)->setText("Create Swc Meta Info failed!");
                ui->SwcFileInfo->item(i, 0)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 2)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 3)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 4)->setBackground(QBrush(Qt::red));
            }
        }

        for (int i = 0; i < m_ESwcList.size(); i++) {
            auto  swcName = ui->SwcFileInfo->item(i, 3)->text().toStdString();
            std::string description = "Auto Generated By SwcManagerClient.";
            proto::CreateSwcResponse response;
            if (WrappedCall::createSwcMeta(swcName, description, response, this)) {
                proto::SwcDataV1 swcData;
                auto& newSwcRawData = m_ESwcList[i].getNeuron();
                for(auto & j : newSwcRawData){
                    auto *newData = swcData.add_swcdata();
                    auto internalData = newData->mutable_swcnodeinternaldata();
                    internalData->set_n(j.n);
                    internalData->set_type(j.type);
                    internalData->set_x(j.x);
                    internalData->set_y(j.y);
                    internalData->set_z(j.z);
                    internalData->set_radius(j.radius);
                    internalData->set_parent(j.parent);
                    internalData->set_seg_id(j.seg_id);
                    internalData->set_level(j.level);
                    internalData->set_mode(j.mode);
                    internalData->set_timestamp(j.timestamp);
                    internalData->set_feature_value(j.feature_value);
                }

                proto::CreateSwcNodeDataResponse response1;
                if(WrappedCall::addSwcNodeData(swcName, swcData, response1, this)){
                    ui->SwcFileInfo->item(i, 4)->setText("Import Success!");
                    ui->SwcFileInfo->item(i, 0)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 2)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 3)->setBackground(QBrush(Qt::green));
                    ui->SwcFileInfo->item(i, 4)->setBackground(QBrush(Qt::green));
                }else{
                    ui->SwcFileInfo->item(i, 4)->setText("Create Swc Node failed!");
                    ui->SwcFileInfo->item(i, 0)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 2)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 3)->setBackground(QBrush(Qt::red));
                    ui->SwcFileInfo->item(i, 4)->setBackground(QBrush(Qt::red));
                }
            }else{
                ui->SwcFileInfo->item(i, 4)->setText("Create Swc Meta Info failed!");
                ui->SwcFileInfo->item(i, 0)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 1)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 2)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 3)->setBackground(QBrush(Qt::red));
                ui->SwcFileInfo->item(i, 4)->setBackground(QBrush(Qt::red));
            }
        }

        m_ActionImportComplete = true;
        QMessageBox::information(this, "Info", "Import action has completed! Please check the <Import Status> in the table!");
    });

    connect(ui->CancelBtn,&QPushButton::clicked,this,[this](){
        reject();
    });
}

ViewImportSwcFromFile::~ViewImportSwcFromFile() {
    delete ui;
}
