// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message/Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2fMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2fMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2fMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2fMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2fMessage_2eproto;
namespace proto {
class DailyStatisticsMetaInfoV1;
struct DailyStatisticsMetaInfoV1DefaultTypeInternal;
extern DailyStatisticsMetaInfoV1DefaultTypeInternal _DailyStatisticsMetaInfoV1_default_instance_;
class GlobalPermissionMetaInfoV1;
struct GlobalPermissionMetaInfoV1DefaultTypeInternal;
extern GlobalPermissionMetaInfoV1DefaultTypeInternal _GlobalPermissionMetaInfoV1_default_instance_;
class MetaInfoBase;
struct MetaInfoBaseDefaultTypeInternal;
extern MetaInfoBaseDefaultTypeInternal _MetaInfoBase_default_instance_;
class PermissionGroupMetaInfoV1;
struct PermissionGroupMetaInfoV1DefaultTypeInternal;
extern PermissionGroupMetaInfoV1DefaultTypeInternal _PermissionGroupMetaInfoV1_default_instance_;
class ProjectMetaInfoV1;
struct ProjectMetaInfoV1DefaultTypeInternal;
extern ProjectMetaInfoV1DefaultTypeInternal _ProjectMetaInfoV1_default_instance_;
class ProjectPermissionMetaInfoV1;
struct ProjectPermissionMetaInfoV1DefaultTypeInternal;
extern ProjectPermissionMetaInfoV1DefaultTypeInternal _ProjectPermissionMetaInfoV1_default_instance_;
class SwcDataV1;
struct SwcDataV1DefaultTypeInternal;
extern SwcDataV1DefaultTypeInternal _SwcDataV1_default_instance_;
class SwcMetaInfoV1;
struct SwcMetaInfoV1DefaultTypeInternal;
extern SwcMetaInfoV1DefaultTypeInternal _SwcMetaInfoV1_default_instance_;
class SwcNodeDataV1;
struct SwcNodeDataV1DefaultTypeInternal;
extern SwcNodeDataV1DefaultTypeInternal _SwcNodeDataV1_default_instance_;
class UserMetaInfoV1;
struct UserMetaInfoV1DefaultTypeInternal;
extern UserMetaInfoV1DefaultTypeInternal _UserMetaInfoV1_default_instance_;
class UserPermissionOverrideMetaInfoV1;
struct UserPermissionOverrideMetaInfoV1DefaultTypeInternal;
extern UserPermissionOverrideMetaInfoV1DefaultTypeInternal _UserPermissionOverrideMetaInfoV1_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::DailyStatisticsMetaInfoV1* Arena::CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(Arena*);
template<> ::proto::GlobalPermissionMetaInfoV1* Arena::CreateMaybeMessage<::proto::GlobalPermissionMetaInfoV1>(Arena*);
template<> ::proto::MetaInfoBase* Arena::CreateMaybeMessage<::proto::MetaInfoBase>(Arena*);
template<> ::proto::PermissionGroupMetaInfoV1* Arena::CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(Arena*);
template<> ::proto::ProjectMetaInfoV1* Arena::CreateMaybeMessage<::proto::ProjectMetaInfoV1>(Arena*);
template<> ::proto::ProjectPermissionMetaInfoV1* Arena::CreateMaybeMessage<::proto::ProjectPermissionMetaInfoV1>(Arena*);
template<> ::proto::SwcDataV1* Arena::CreateMaybeMessage<::proto::SwcDataV1>(Arena*);
template<> ::proto::SwcMetaInfoV1* Arena::CreateMaybeMessage<::proto::SwcMetaInfoV1>(Arena*);
template<> ::proto::SwcNodeDataV1* Arena::CreateMaybeMessage<::proto::SwcNodeDataV1>(Arena*);
template<> ::proto::UserMetaInfoV1* Arena::CreateMaybeMessage<::proto::UserMetaInfoV1>(Arena*);
template<> ::proto::UserPermissionOverrideMetaInfoV1* Arena::CreateMaybeMessage<::proto::UserPermissionOverrideMetaInfoV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class MetaInfoBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MetaInfoBase) */ {
 public:
  inline MetaInfoBase() : MetaInfoBase(nullptr) {}
  ~MetaInfoBase() override;
  explicit PROTOBUF_CONSTEXPR MetaInfoBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaInfoBase(const MetaInfoBase& from);
  MetaInfoBase(MetaInfoBase&& from) noexcept
    : MetaInfoBase() {
    *this = ::std::move(from);
  }

  inline MetaInfoBase& operator=(const MetaInfoBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaInfoBase& operator=(MetaInfoBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaInfoBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaInfoBase* internal_default_instance() {
    return reinterpret_cast<const MetaInfoBase*>(
               &_MetaInfoBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaInfoBase& a, MetaInfoBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaInfoBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaInfoBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaInfoBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaInfoBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetaInfoBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetaInfoBase& from) {
    MetaInfoBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaInfoBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MetaInfoBase";
  }
  protected:
  explicit MetaInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kApiVersionFieldNumber = 2,
    kUuidFieldNumber = 3,
  };
  // string _id = 1;
  void clear__id();
  const std::string& _id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__id(ArgT0&& arg0, ArgT... args);
  std::string* mutable__id();
  PROTOBUF_NODISCARD std::string* release__id();
  void set_allocated__id(std::string* _id);
  private:
  const std::string& _internal__id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__id(const std::string& value);
  std::string* _internal_mutable__id();
  public:

  // string ApiVersion = 2;
  void clear_apiversion();
  const std::string& apiversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apiversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apiversion();
  PROTOBUF_NODISCARD std::string* release_apiversion();
  void set_allocated_apiversion(std::string* apiversion);
  private:
  const std::string& _internal_apiversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apiversion(const std::string& value);
  std::string* _internal_mutable_apiversion();
  public:

  // string Uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:proto.MetaInfoBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apiversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class UserMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserMetaInfoV1) */ {
 public:
  inline UserMetaInfoV1() : UserMetaInfoV1(nullptr) {}
  ~UserMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR UserMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMetaInfoV1(const UserMetaInfoV1& from);
  UserMetaInfoV1(UserMetaInfoV1&& from) noexcept
    : UserMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline UserMetaInfoV1& operator=(const UserMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMetaInfoV1& operator=(UserMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const UserMetaInfoV1*>(
               &_UserMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserMetaInfoV1& a, UserMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserMetaInfoV1& from) {
    UserMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserMetaInfoV1";
  }
  protected:
  explicit UserMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kHeadPhotoBinDataFieldNumber = 6,
    kUserPermissionGroupFieldNumber = 7,
    kOnlineStatusFieldNumber = 8,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 5,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string Description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes HeadPhotoBinData = 6;
  void clear_headphotobindata();
  const std::string& headphotobindata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headphotobindata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headphotobindata();
  PROTOBUF_NODISCARD std::string* release_headphotobindata();
  void set_allocated_headphotobindata(std::string* headphotobindata);
  private:
  const std::string& _internal_headphotobindata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headphotobindata(const std::string& value);
  std::string* _internal_mutable_headphotobindata();
  public:

  // string UserPermissionGroup = 7;
  void clear_userpermissiongroup();
  const std::string& userpermissiongroup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userpermissiongroup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userpermissiongroup();
  PROTOBUF_NODISCARD std::string* release_userpermissiongroup();
  void set_allocated_userpermissiongroup(std::string* userpermissiongroup);
  private:
  const std::string& _internal_userpermissiongroup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userpermissiongroup(const std::string& value);
  std::string* _internal_mutable_userpermissiongroup();
  public:

  // string OnlineStatus = 8;
  void clear_onlinestatus();
  const std::string& onlinestatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onlinestatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onlinestatus();
  PROTOBUF_NODISCARD std::string* release_onlinestatus();
  void set_allocated_onlinestatus(std::string* onlinestatus);
  private:
  const std::string& _internal_onlinestatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onlinestatus(const std::string& value);
  std::string* _internal_mutable_onlinestatus();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 5;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // @@protoc_insertion_point(class_scope:proto.UserMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headphotobindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpermissiongroup_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onlinestatus_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class GlobalPermissionMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GlobalPermissionMetaInfoV1) */ {
 public:
  inline GlobalPermissionMetaInfoV1() : GlobalPermissionMetaInfoV1(nullptr) {}
  ~GlobalPermissionMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR GlobalPermissionMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalPermissionMetaInfoV1(const GlobalPermissionMetaInfoV1& from);
  GlobalPermissionMetaInfoV1(GlobalPermissionMetaInfoV1&& from) noexcept
    : GlobalPermissionMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline GlobalPermissionMetaInfoV1& operator=(const GlobalPermissionMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalPermissionMetaInfoV1& operator=(GlobalPermissionMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalPermissionMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalPermissionMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const GlobalPermissionMetaInfoV1*>(
               &_GlobalPermissionMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalPermissionMetaInfoV1& a, GlobalPermissionMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalPermissionMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalPermissionMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalPermissionMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalPermissionMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalPermissionMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GlobalPermissionMetaInfoV1& from) {
    GlobalPermissionMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalPermissionMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GlobalPermissionMetaInfoV1";
  }
  protected:
  explicit GlobalPermissionMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWritePermissionCreateProjectFieldNumber = 1,
    kWritePermissionModifyProjectFieldNumber = 2,
    kWritePermissionDeleteProjectFieldNumber = 3,
    kReadPerimissionQueryFieldNumber = 4,
  };
  // bool WritePermissionCreateProject = 1;
  void clear_writepermissioncreateproject();
  bool writepermissioncreateproject() const;
  void set_writepermissioncreateproject(bool value);
  private:
  bool _internal_writepermissioncreateproject() const;
  void _internal_set_writepermissioncreateproject(bool value);
  public:

  // bool WritePermissionModifyProject = 2;
  void clear_writepermissionmodifyproject();
  bool writepermissionmodifyproject() const;
  void set_writepermissionmodifyproject(bool value);
  private:
  bool _internal_writepermissionmodifyproject() const;
  void _internal_set_writepermissionmodifyproject(bool value);
  public:

  // bool WritePermissionDeleteProject = 3;
  void clear_writepermissiondeleteproject();
  bool writepermissiondeleteproject() const;
  void set_writepermissiondeleteproject(bool value);
  private:
  bool _internal_writepermissiondeleteproject() const;
  void _internal_set_writepermissiondeleteproject(bool value);
  public:

  // bool ReadPerimissionQuery = 4;
  void clear_readperimissionquery();
  bool readperimissionquery() const;
  void set_readperimissionquery(bool value);
  private:
  bool _internal_readperimissionquery() const;
  void _internal_set_readperimissionquery(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GlobalPermissionMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool writepermissioncreateproject_;
    bool writepermissionmodifyproject_;
    bool writepermissiondeleteproject_;
    bool readperimissionquery_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class ProjectPermissionMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ProjectPermissionMetaInfoV1) */ {
 public:
  inline ProjectPermissionMetaInfoV1() : ProjectPermissionMetaInfoV1(nullptr) {}
  ~ProjectPermissionMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR ProjectPermissionMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectPermissionMetaInfoV1(const ProjectPermissionMetaInfoV1& from);
  ProjectPermissionMetaInfoV1(ProjectPermissionMetaInfoV1&& from) noexcept
    : ProjectPermissionMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline ProjectPermissionMetaInfoV1& operator=(const ProjectPermissionMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectPermissionMetaInfoV1& operator=(ProjectPermissionMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectPermissionMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectPermissionMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const ProjectPermissionMetaInfoV1*>(
               &_ProjectPermissionMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProjectPermissionMetaInfoV1& a, ProjectPermissionMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectPermissionMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectPermissionMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectPermissionMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectPermissionMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectPermissionMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectPermissionMetaInfoV1& from) {
    ProjectPermissionMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectPermissionMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ProjectPermissionMetaInfoV1";
  }
  protected:
  explicit ProjectPermissionMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWritePermissionAddDataFieldNumber = 1,
    kWritePermissionModifyDataFieldNumber = 2,
    kWritePermissionDeleteDataFieldNumber = 3,
    kReadPerimissionQueryFieldNumber = 4,
  };
  // bool WritePermissionAddData = 1;
  void clear_writepermissionadddata();
  bool writepermissionadddata() const;
  void set_writepermissionadddata(bool value);
  private:
  bool _internal_writepermissionadddata() const;
  void _internal_set_writepermissionadddata(bool value);
  public:

  // bool WritePermissionModifyData = 2;
  void clear_writepermissionmodifydata();
  bool writepermissionmodifydata() const;
  void set_writepermissionmodifydata(bool value);
  private:
  bool _internal_writepermissionmodifydata() const;
  void _internal_set_writepermissionmodifydata(bool value);
  public:

  // bool WritePermissionDeleteData = 3;
  void clear_writepermissiondeletedata();
  bool writepermissiondeletedata() const;
  void set_writepermissiondeletedata(bool value);
  private:
  bool _internal_writepermissiondeletedata() const;
  void _internal_set_writepermissiondeletedata(bool value);
  public:

  // bool ReadPerimissionQuery = 4;
  void clear_readperimissionquery();
  bool readperimissionquery() const;
  void set_readperimissionquery(bool value);
  private:
  bool _internal_readperimissionquery() const;
  void _internal_set_readperimissionquery(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ProjectPermissionMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool writepermissionadddata_;
    bool writepermissionmodifydata_;
    bool writepermissiondeletedata_;
    bool readperimissionquery_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class PermissionGroupMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PermissionGroupMetaInfoV1) */ {
 public:
  inline PermissionGroupMetaInfoV1() : PermissionGroupMetaInfoV1(nullptr) {}
  ~PermissionGroupMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR PermissionGroupMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionGroupMetaInfoV1(const PermissionGroupMetaInfoV1& from);
  PermissionGroupMetaInfoV1(PermissionGroupMetaInfoV1&& from) noexcept
    : PermissionGroupMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline PermissionGroupMetaInfoV1& operator=(const PermissionGroupMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionGroupMetaInfoV1& operator=(PermissionGroupMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionGroupMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionGroupMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const PermissionGroupMetaInfoV1*>(
               &_PermissionGroupMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PermissionGroupMetaInfoV1& a, PermissionGroupMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionGroupMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionGroupMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionGroupMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionGroupMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionGroupMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionGroupMetaInfoV1& from) {
    PermissionGroupMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionGroupMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PermissionGroupMetaInfoV1";
  }
  protected:
  explicit PermissionGroupMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kBaseFieldNumber = 1,
    kGlobalPermissionFieldNumber = 4,
    kProjectPermissionFieldNumber = 5,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .proto.GlobalPermissionMetaInfoV1 GlobalPermission = 4;
  bool has_globalpermission() const;
  private:
  bool _internal_has_globalpermission() const;
  public:
  void clear_globalpermission();
  const ::proto::GlobalPermissionMetaInfoV1& globalpermission() const;
  PROTOBUF_NODISCARD ::proto::GlobalPermissionMetaInfoV1* release_globalpermission();
  ::proto::GlobalPermissionMetaInfoV1* mutable_globalpermission();
  void set_allocated_globalpermission(::proto::GlobalPermissionMetaInfoV1* globalpermission);
  private:
  const ::proto::GlobalPermissionMetaInfoV1& _internal_globalpermission() const;
  ::proto::GlobalPermissionMetaInfoV1* _internal_mutable_globalpermission();
  public:
  void unsafe_arena_set_allocated_globalpermission(
      ::proto::GlobalPermissionMetaInfoV1* globalpermission);
  ::proto::GlobalPermissionMetaInfoV1* unsafe_arena_release_globalpermission();

  // .proto.ProjectPermissionMetaInfoV1 ProjectPermission = 5;
  bool has_projectpermission() const;
  private:
  bool _internal_has_projectpermission() const;
  public:
  void clear_projectpermission();
  const ::proto::ProjectPermissionMetaInfoV1& projectpermission() const;
  PROTOBUF_NODISCARD ::proto::ProjectPermissionMetaInfoV1* release_projectpermission();
  ::proto::ProjectPermissionMetaInfoV1* mutable_projectpermission();
  void set_allocated_projectpermission(::proto::ProjectPermissionMetaInfoV1* projectpermission);
  private:
  const ::proto::ProjectPermissionMetaInfoV1& _internal_projectpermission() const;
  ::proto::ProjectPermissionMetaInfoV1* _internal_mutable_projectpermission();
  public:
  void unsafe_arena_set_allocated_projectpermission(
      ::proto::ProjectPermissionMetaInfoV1* projectpermission);
  ::proto::ProjectPermissionMetaInfoV1* unsafe_arena_release_projectpermission();

  // @@protoc_insertion_point(class_scope:proto.PermissionGroupMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::proto::MetaInfoBase* base_;
    ::proto::GlobalPermissionMetaInfoV1* globalpermission_;
    ::proto::ProjectPermissionMetaInfoV1* projectpermission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class UserPermissionOverrideMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserPermissionOverrideMetaInfoV1) */ {
 public:
  inline UserPermissionOverrideMetaInfoV1() : UserPermissionOverrideMetaInfoV1(nullptr) {}
  ~UserPermissionOverrideMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR UserPermissionOverrideMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserPermissionOverrideMetaInfoV1(const UserPermissionOverrideMetaInfoV1& from);
  UserPermissionOverrideMetaInfoV1(UserPermissionOverrideMetaInfoV1&& from) noexcept
    : UserPermissionOverrideMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline UserPermissionOverrideMetaInfoV1& operator=(const UserPermissionOverrideMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPermissionOverrideMetaInfoV1& operator=(UserPermissionOverrideMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPermissionOverrideMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserPermissionOverrideMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const UserPermissionOverrideMetaInfoV1*>(
               &_UserPermissionOverrideMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserPermissionOverrideMetaInfoV1& a, UserPermissionOverrideMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPermissionOverrideMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPermissionOverrideMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPermissionOverrideMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserPermissionOverrideMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserPermissionOverrideMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserPermissionOverrideMetaInfoV1& from) {
    UserPermissionOverrideMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPermissionOverrideMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserPermissionOverrideMetaInfoV1";
  }
  protected:
  explicit UserPermissionOverrideMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalPermissionFieldNumber = 1,
    kProjectPermissionFieldNumber = 2,
  };
  // .proto.GlobalPermissionMetaInfoV1 GlobalPermission = 1;
  bool has_globalpermission() const;
  private:
  bool _internal_has_globalpermission() const;
  public:
  void clear_globalpermission();
  const ::proto::GlobalPermissionMetaInfoV1& globalpermission() const;
  PROTOBUF_NODISCARD ::proto::GlobalPermissionMetaInfoV1* release_globalpermission();
  ::proto::GlobalPermissionMetaInfoV1* mutable_globalpermission();
  void set_allocated_globalpermission(::proto::GlobalPermissionMetaInfoV1* globalpermission);
  private:
  const ::proto::GlobalPermissionMetaInfoV1& _internal_globalpermission() const;
  ::proto::GlobalPermissionMetaInfoV1* _internal_mutable_globalpermission();
  public:
  void unsafe_arena_set_allocated_globalpermission(
      ::proto::GlobalPermissionMetaInfoV1* globalpermission);
  ::proto::GlobalPermissionMetaInfoV1* unsafe_arena_release_globalpermission();

  // .proto.ProjectPermissionMetaInfoV1 ProjectPermission = 2;
  bool has_projectpermission() const;
  private:
  bool _internal_has_projectpermission() const;
  public:
  void clear_projectpermission();
  const ::proto::ProjectPermissionMetaInfoV1& projectpermission() const;
  PROTOBUF_NODISCARD ::proto::ProjectPermissionMetaInfoV1* release_projectpermission();
  ::proto::ProjectPermissionMetaInfoV1* mutable_projectpermission();
  void set_allocated_projectpermission(::proto::ProjectPermissionMetaInfoV1* projectpermission);
  private:
  const ::proto::ProjectPermissionMetaInfoV1& _internal_projectpermission() const;
  ::proto::ProjectPermissionMetaInfoV1* _internal_mutable_projectpermission();
  public:
  void unsafe_arena_set_allocated_projectpermission(
      ::proto::ProjectPermissionMetaInfoV1* projectpermission);
  ::proto::ProjectPermissionMetaInfoV1* unsafe_arena_release_projectpermission();

  // @@protoc_insertion_point(class_scope:proto.UserPermissionOverrideMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::GlobalPermissionMetaInfoV1* globalpermission_;
    ::proto::ProjectPermissionMetaInfoV1* projectpermission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class ProjectMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ProjectMetaInfoV1) */ {
 public:
  inline ProjectMetaInfoV1() : ProjectMetaInfoV1(nullptr) {}
  ~ProjectMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR ProjectMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectMetaInfoV1(const ProjectMetaInfoV1& from);
  ProjectMetaInfoV1(ProjectMetaInfoV1&& from) noexcept
    : ProjectMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline ProjectMetaInfoV1& operator=(const ProjectMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectMetaInfoV1& operator=(ProjectMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const ProjectMetaInfoV1*>(
               &_ProjectMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProjectMetaInfoV1& a, ProjectMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectMetaInfoV1& from) {
    ProjectMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ProjectMetaInfoV1";
  }
  protected:
  explicit ProjectMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcListFieldNumber = 7,
    kUserPermissionOverrideFieldNumber = 8,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreatorFieldNumber = 4,
    kWorkModeFieldNumber = 9,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 5,
    kLastModifiedTimeFieldNumber = 6,
  };
  // repeated string SwcList = 7;
  int swclist_size() const;
  private:
  int _internal_swclist_size() const;
  public:
  void clear_swclist();
  const std::string& swclist(int index) const;
  std::string* mutable_swclist(int index);
  void set_swclist(int index, const std::string& value);
  void set_swclist(int index, std::string&& value);
  void set_swclist(int index, const char* value);
  void set_swclist(int index, const char* value, size_t size);
  std::string* add_swclist();
  void add_swclist(const std::string& value);
  void add_swclist(std::string&& value);
  void add_swclist(const char* value);
  void add_swclist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& swclist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_swclist();
  private:
  const std::string& _internal_swclist(int index) const;
  std::string* _internal_add_swclist();
  public:

  // repeated .proto.ProjectPermissionMetaInfoV1 UserPermissionOverride = 8;
  int userpermissionoverride_size() const;
  private:
  int _internal_userpermissionoverride_size() const;
  public:
  void clear_userpermissionoverride();
  ::proto::ProjectPermissionMetaInfoV1* mutable_userpermissionoverride(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectPermissionMetaInfoV1 >*
      mutable_userpermissionoverride();
  private:
  const ::proto::ProjectPermissionMetaInfoV1& _internal_userpermissionoverride(int index) const;
  ::proto::ProjectPermissionMetaInfoV1* _internal_add_userpermissionoverride();
  public:
  const ::proto::ProjectPermissionMetaInfoV1& userpermissionoverride(int index) const;
  ::proto::ProjectPermissionMetaInfoV1* add_userpermissionoverride();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectPermissionMetaInfoV1 >&
      userpermissionoverride() const;

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Creator = 4;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string WorkMode = 9;
  void clear_workmode();
  const std::string& workmode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workmode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workmode();
  PROTOBUF_NODISCARD std::string* release_workmode();
  void set_allocated_workmode(std::string* workmode);
  private:
  const std::string& _internal_workmode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workmode(const std::string& value);
  std::string* _internal_mutable_workmode();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 5;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .google.protobuf.Timestamp LastModifiedTime = 6;
  bool has_lastmodifiedtime() const;
  private:
  bool _internal_has_lastmodifiedtime() const;
  public:
  void clear_lastmodifiedtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lastmodifiedtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lastmodifiedtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastmodifiedtime();
  void set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastmodifiedtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastmodifiedtime();
  public:
  void unsafe_arena_set_allocated_lastmodifiedtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastmodifiedtime();

  // @@protoc_insertion_point(class_scope:proto.ProjectMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> swclist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectPermissionMetaInfoV1 > userpermissionoverride_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workmode_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcMetaInfoV1) */ {
 public:
  inline SwcMetaInfoV1() : SwcMetaInfoV1(nullptr) {}
  ~SwcMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcMetaInfoV1(const SwcMetaInfoV1& from);
  SwcMetaInfoV1(SwcMetaInfoV1&& from) noexcept
    : SwcMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline SwcMetaInfoV1& operator=(const SwcMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcMetaInfoV1& operator=(SwcMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const SwcMetaInfoV1*>(
               &_SwcMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SwcMetaInfoV1& a, SwcMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcMetaInfoV1& from) {
    SwcMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcMetaInfoV1";
  }
  protected:
  explicit SwcMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreatorFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 5,
    kLastModifiedTimeFieldNumber = 6,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Creator = 4;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 5;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .google.protobuf.Timestamp LastModifiedTime = 6;
  bool has_lastmodifiedtime() const;
  private:
  bool _internal_has_lastmodifiedtime() const;
  public:
  void clear_lastmodifiedtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lastmodifiedtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lastmodifiedtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastmodifiedtime();
  void set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastmodifiedtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastmodifiedtime();
  public:
  void unsafe_arena_set_allocated_lastmodifiedtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastmodifiedtime();

  // @@protoc_insertion_point(class_scope:proto.SwcMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcNodeDataV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcNodeDataV1) */ {
 public:
  inline SwcNodeDataV1() : SwcNodeDataV1(nullptr) {}
  ~SwcNodeDataV1() override;
  explicit PROTOBUF_CONSTEXPR SwcNodeDataV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcNodeDataV1(const SwcNodeDataV1& from);
  SwcNodeDataV1(SwcNodeDataV1&& from) noexcept
    : SwcNodeDataV1() {
    *this = ::std::move(from);
  }

  inline SwcNodeDataV1& operator=(const SwcNodeDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcNodeDataV1& operator=(SwcNodeDataV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcNodeDataV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcNodeDataV1* internal_default_instance() {
    return reinterpret_cast<const SwcNodeDataV1*>(
               &_SwcNodeDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SwcNodeDataV1& a, SwcNodeDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcNodeDataV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcNodeDataV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcNodeDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcNodeDataV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcNodeDataV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcNodeDataV1& from) {
    SwcNodeDataV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcNodeDataV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcNodeDataV1";
  }
  protected:
  explicit SwcNodeDataV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcDataFieldNumber = 2,
    kCreatorFieldNumber = 3,
    kAnnotatorUserUuidFieldNumber = 6,
    kCheckerUserUuidFieldNumber = 7,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 4,
    kLastModifiedTimeFieldNumber = 5,
  };
  // string SwcData = 2;
  void clear_swcdata();
  const std::string& swcdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcdata();
  PROTOBUF_NODISCARD std::string* release_swcdata();
  void set_allocated_swcdata(std::string* swcdata);
  private:
  const std::string& _internal_swcdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcdata(const std::string& value);
  std::string* _internal_mutable_swcdata();
  public:

  // string Creator = 3;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string AnnotatorUserUuid = 6;
  void clear_annotatoruseruuid();
  const std::string& annotatoruseruuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotatoruseruuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotatoruseruuid();
  PROTOBUF_NODISCARD std::string* release_annotatoruseruuid();
  void set_allocated_annotatoruseruuid(std::string* annotatoruseruuid);
  private:
  const std::string& _internal_annotatoruseruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotatoruseruuid(const std::string& value);
  std::string* _internal_mutable_annotatoruseruuid();
  public:

  // string CheckerUserUuid = 7;
  void clear_checkeruseruuid();
  const std::string& checkeruseruuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkeruseruuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkeruseruuid();
  PROTOBUF_NODISCARD std::string* release_checkeruseruuid();
  void set_allocated_checkeruseruuid(std::string* checkeruseruuid);
  private:
  const std::string& _internal_checkeruseruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkeruseruuid(const std::string& value);
  std::string* _internal_mutable_checkeruseruuid();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 4;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .google.protobuf.Timestamp LastModifiedTime = 5;
  bool has_lastmodifiedtime() const;
  private:
  bool _internal_has_lastmodifiedtime() const;
  public:
  void clear_lastmodifiedtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lastmodifiedtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lastmodifiedtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastmodifiedtime();
  void set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastmodifiedtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastmodifiedtime();
  public:
  void unsafe_arena_set_allocated_lastmodifiedtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastmodifiedtime();

  // @@protoc_insertion_point(class_scope:proto.SwcNodeDataV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotatoruseruuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkeruseruuid_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcDataV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcDataV1) */ {
 public:
  inline SwcDataV1() : SwcDataV1(nullptr) {}
  ~SwcDataV1() override;
  explicit PROTOBUF_CONSTEXPR SwcDataV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcDataV1(const SwcDataV1& from);
  SwcDataV1(SwcDataV1&& from) noexcept
    : SwcDataV1() {
    *this = ::std::move(from);
  }

  inline SwcDataV1& operator=(const SwcDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcDataV1& operator=(SwcDataV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcDataV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcDataV1* internal_default_instance() {
    return reinterpret_cast<const SwcDataV1*>(
               &_SwcDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SwcDataV1& a, SwcDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcDataV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcDataV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcDataV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcDataV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcDataV1& from) {
    SwcDataV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcDataV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcDataV1";
  }
  protected:
  explicit SwcDataV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcDataFieldNumber = 1,
  };
  // repeated .proto.SwcNodeDataV1 SwcData = 1;
  int swcdata_size() const;
  private:
  int _internal_swcdata_size() const;
  public:
  void clear_swcdata();
  ::proto::SwcNodeDataV1* mutable_swcdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >*
      mutable_swcdata();
  private:
  const ::proto::SwcNodeDataV1& _internal_swcdata(int index) const;
  ::proto::SwcNodeDataV1* _internal_add_swcdata();
  public:
  const ::proto::SwcNodeDataV1& swcdata(int index) const;
  ::proto::SwcNodeDataV1* add_swcdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >&
      swcdata() const;

  // @@protoc_insertion_point(class_scope:proto.SwcDataV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 > swcdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class DailyStatisticsMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DailyStatisticsMetaInfoV1) */ {
 public:
  inline DailyStatisticsMetaInfoV1() : DailyStatisticsMetaInfoV1(nullptr) {}
  ~DailyStatisticsMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR DailyStatisticsMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DailyStatisticsMetaInfoV1(const DailyStatisticsMetaInfoV1& from);
  DailyStatisticsMetaInfoV1(DailyStatisticsMetaInfoV1&& from) noexcept
    : DailyStatisticsMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline DailyStatisticsMetaInfoV1& operator=(const DailyStatisticsMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline DailyStatisticsMetaInfoV1& operator=(DailyStatisticsMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DailyStatisticsMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const DailyStatisticsMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const DailyStatisticsMetaInfoV1*>(
               &_DailyStatisticsMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DailyStatisticsMetaInfoV1& a, DailyStatisticsMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(DailyStatisticsMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DailyStatisticsMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DailyStatisticsMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DailyStatisticsMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DailyStatisticsMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DailyStatisticsMetaInfoV1& from) {
    DailyStatisticsMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DailyStatisticsMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DailyStatisticsMetaInfoV1";
  }
  protected:
  explicit DailyStatisticsMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kDayFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCreatedProjectNumberFieldNumber = 5,
    kCreatedSwcNumberFieldNumber = 6,
    kCreateSwcNodeNumberFieldNumber = 7,
    kDeletedProjectNumberFieldNumber = 8,
    kDeletedSwcNumberFieldNumber = 9,
    kDeletedSwcNodeNumberFieldNumber = 10,
    kModifiedProjectNumberFieldNumber = 11,
    kModifiedSwcNumberFieldNumber = 12,
    kModifiedSwcNodeNumberFieldNumber = 13,
    kProjectQueryNumberFieldNumber = 14,
    kSwcQueryNumberFieldNumber = 15,
    kNodeQueryNumberFieldNumber = 16,
    kActiveUserNumberFieldNumber = 17,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Day = 4;
  void clear_day();
  const std::string& day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_day();
  PROTOBUF_NODISCARD std::string* release_day();
  void set_allocated_day(std::string* day);
  private:
  const std::string& _internal_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_day(const std::string& value);
  std::string* _internal_mutable_day();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // int32 CreatedProjectNumber = 5;
  void clear_createdprojectnumber();
  int32_t createdprojectnumber() const;
  void set_createdprojectnumber(int32_t value);
  private:
  int32_t _internal_createdprojectnumber() const;
  void _internal_set_createdprojectnumber(int32_t value);
  public:

  // int32 CreatedSwcNumber = 6;
  void clear_createdswcnumber();
  int32_t createdswcnumber() const;
  void set_createdswcnumber(int32_t value);
  private:
  int32_t _internal_createdswcnumber() const;
  void _internal_set_createdswcnumber(int32_t value);
  public:

  // int32 CreateSwcNodeNumber = 7;
  void clear_createswcnodenumber();
  int32_t createswcnodenumber() const;
  void set_createswcnodenumber(int32_t value);
  private:
  int32_t _internal_createswcnodenumber() const;
  void _internal_set_createswcnodenumber(int32_t value);
  public:

  // int32 DeletedProjectNumber = 8;
  void clear_deletedprojectnumber();
  int32_t deletedprojectnumber() const;
  void set_deletedprojectnumber(int32_t value);
  private:
  int32_t _internal_deletedprojectnumber() const;
  void _internal_set_deletedprojectnumber(int32_t value);
  public:

  // int32 DeletedSwcNumber = 9;
  void clear_deletedswcnumber();
  int32_t deletedswcnumber() const;
  void set_deletedswcnumber(int32_t value);
  private:
  int32_t _internal_deletedswcnumber() const;
  void _internal_set_deletedswcnumber(int32_t value);
  public:

  // int32 DeletedSwcNodeNumber = 10;
  void clear_deletedswcnodenumber();
  int32_t deletedswcnodenumber() const;
  void set_deletedswcnodenumber(int32_t value);
  private:
  int32_t _internal_deletedswcnodenumber() const;
  void _internal_set_deletedswcnodenumber(int32_t value);
  public:

  // int32 ModifiedProjectNumber = 11;
  void clear_modifiedprojectnumber();
  int32_t modifiedprojectnumber() const;
  void set_modifiedprojectnumber(int32_t value);
  private:
  int32_t _internal_modifiedprojectnumber() const;
  void _internal_set_modifiedprojectnumber(int32_t value);
  public:

  // int32 ModifiedSwcNumber = 12;
  void clear_modifiedswcnumber();
  int32_t modifiedswcnumber() const;
  void set_modifiedswcnumber(int32_t value);
  private:
  int32_t _internal_modifiedswcnumber() const;
  void _internal_set_modifiedswcnumber(int32_t value);
  public:

  // int32 ModifiedSwcNodeNumber = 13;
  void clear_modifiedswcnodenumber();
  int32_t modifiedswcnodenumber() const;
  void set_modifiedswcnodenumber(int32_t value);
  private:
  int32_t _internal_modifiedswcnodenumber() const;
  void _internal_set_modifiedswcnodenumber(int32_t value);
  public:

  // int32 ProjectQueryNumber = 14;
  void clear_projectquerynumber();
  int32_t projectquerynumber() const;
  void set_projectquerynumber(int32_t value);
  private:
  int32_t _internal_projectquerynumber() const;
  void _internal_set_projectquerynumber(int32_t value);
  public:

  // int32 SwcQueryNumber = 15;
  void clear_swcquerynumber();
  int32_t swcquerynumber() const;
  void set_swcquerynumber(int32_t value);
  private:
  int32_t _internal_swcquerynumber() const;
  void _internal_set_swcquerynumber(int32_t value);
  public:

  // int32 NodeQueryNumber = 16;
  void clear_nodequerynumber();
  int32_t nodequerynumber() const;
  void set_nodequerynumber(int32_t value);
  private:
  int32_t _internal_nodequerynumber() const;
  void _internal_set_nodequerynumber(int32_t value);
  public:

  // int32 ActiveUserNumber = 17;
  void clear_activeusernumber();
  int32_t activeusernumber() const;
  void set_activeusernumber(int32_t value);
  private:
  int32_t _internal_activeusernumber() const;
  void _internal_set_activeusernumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DailyStatisticsMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr day_;
    ::proto::MetaInfoBase* base_;
    int32_t createdprojectnumber_;
    int32_t createdswcnumber_;
    int32_t createswcnodenumber_;
    int32_t deletedprojectnumber_;
    int32_t deletedswcnumber_;
    int32_t deletedswcnodenumber_;
    int32_t modifiedprojectnumber_;
    int32_t modifiedswcnumber_;
    int32_t modifiedswcnodenumber_;
    int32_t projectquerynumber_;
    int32_t swcquerynumber_;
    int32_t nodequerynumber_;
    int32_t activeusernumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaInfoBase

// string _id = 1;
inline void MetaInfoBase::clear__id() {
  _impl_._id_.ClearToEmpty();
}
inline const std::string& MetaInfoBase::_id() const {
  // @@protoc_insertion_point(field_get:proto.MetaInfoBase._id)
  return _internal__id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfoBase::set__id(ArgT0&& arg0, ArgT... args) {
 
 _impl_._id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MetaInfoBase._id)
}
inline std::string* MetaInfoBase::mutable__id() {
  std::string* _s = _internal_mutable__id();
  // @@protoc_insertion_point(field_mutable:proto.MetaInfoBase._id)
  return _s;
}
inline const std::string& MetaInfoBase::_internal__id() const {
  return _impl_._id_.Get();
}
inline void MetaInfoBase::_internal_set__id(const std::string& value) {
  
  _impl_._id_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfoBase::_internal_mutable__id() {
  
  return _impl_._id_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfoBase::release__id() {
  // @@protoc_insertion_point(field_release:proto.MetaInfoBase._id)
  return _impl_._id_.Release();
}
inline void MetaInfoBase::set_allocated__id(std::string* _id) {
  if (_id != nullptr) {
    
  } else {
    
  }
  _impl_._id_.SetAllocated(_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._id_.IsDefault()) {
    _impl_._id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MetaInfoBase._id)
}

// string ApiVersion = 2;
inline void MetaInfoBase::clear_apiversion() {
  _impl_.apiversion_.ClearToEmpty();
}
inline const std::string& MetaInfoBase::apiversion() const {
  // @@protoc_insertion_point(field_get:proto.MetaInfoBase.ApiVersion)
  return _internal_apiversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfoBase::set_apiversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apiversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MetaInfoBase.ApiVersion)
}
inline std::string* MetaInfoBase::mutable_apiversion() {
  std::string* _s = _internal_mutable_apiversion();
  // @@protoc_insertion_point(field_mutable:proto.MetaInfoBase.ApiVersion)
  return _s;
}
inline const std::string& MetaInfoBase::_internal_apiversion() const {
  return _impl_.apiversion_.Get();
}
inline void MetaInfoBase::_internal_set_apiversion(const std::string& value) {
  
  _impl_.apiversion_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfoBase::_internal_mutable_apiversion() {
  
  return _impl_.apiversion_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfoBase::release_apiversion() {
  // @@protoc_insertion_point(field_release:proto.MetaInfoBase.ApiVersion)
  return _impl_.apiversion_.Release();
}
inline void MetaInfoBase::set_allocated_apiversion(std::string* apiversion) {
  if (apiversion != nullptr) {
    
  } else {
    
  }
  _impl_.apiversion_.SetAllocated(apiversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apiversion_.IsDefault()) {
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MetaInfoBase.ApiVersion)
}

// string Uuid = 3;
inline void MetaInfoBase::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& MetaInfoBase::uuid() const {
  // @@protoc_insertion_point(field_get:proto.MetaInfoBase.Uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfoBase::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MetaInfoBase.Uuid)
}
inline std::string* MetaInfoBase::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:proto.MetaInfoBase.Uuid)
  return _s;
}
inline const std::string& MetaInfoBase::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void MetaInfoBase::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfoBase::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfoBase::release_uuid() {
  // @@protoc_insertion_point(field_release:proto.MetaInfoBase.Uuid)
  return _impl_.uuid_.Release();
}
inline void MetaInfoBase::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MetaInfoBase.Uuid)
}

// -------------------------------------------------------------------

// UserMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool UserMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UserMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void UserMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& UserMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& UserMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Base)
  return _internal_base();
}
inline void UserMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Base)
  return _msg;
}
inline void UserMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Base)
}

// string Name = 2;
inline void UserMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.Name)
}
inline std::string* UserMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Name)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void UserMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Name)
}

// string Password = 3;
inline void UserMetaInfoV1::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::password() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.Password)
}
inline std::string* UserMetaInfoV1::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Password)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserMetaInfoV1::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_password() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Password)
  return _impl_.password_.Release();
}
inline void UserMetaInfoV1::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Password)
}

// string Description = 4;
inline void UserMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.Description)
}
inline std::string* UserMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Description)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void UserMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void UserMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Description)
}

// .google.protobuf.Timestamp CreateTime = 5;
inline bool UserMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool UserMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void UserMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.CreateTime)
  return _msg;
}
inline void UserMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.CreateTime)
}

// bytes HeadPhotoBinData = 6;
inline void UserMetaInfoV1::clear_headphotobindata() {
  _impl_.headphotobindata_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::headphotobindata() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.HeadPhotoBinData)
  return _internal_headphotobindata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_headphotobindata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.headphotobindata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.HeadPhotoBinData)
}
inline std::string* UserMetaInfoV1::mutable_headphotobindata() {
  std::string* _s = _internal_mutable_headphotobindata();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.HeadPhotoBinData)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_headphotobindata() const {
  return _impl_.headphotobindata_.Get();
}
inline void UserMetaInfoV1::_internal_set_headphotobindata(const std::string& value) {
  
  _impl_.headphotobindata_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_headphotobindata() {
  
  return _impl_.headphotobindata_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_headphotobindata() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.HeadPhotoBinData)
  return _impl_.headphotobindata_.Release();
}
inline void UserMetaInfoV1::set_allocated_headphotobindata(std::string* headphotobindata) {
  if (headphotobindata != nullptr) {
    
  } else {
    
  }
  _impl_.headphotobindata_.SetAllocated(headphotobindata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headphotobindata_.IsDefault()) {
    _impl_.headphotobindata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.HeadPhotoBinData)
}

// string UserPermissionGroup = 7;
inline void UserMetaInfoV1::clear_userpermissiongroup() {
  _impl_.userpermissiongroup_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::userpermissiongroup() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.UserPermissionGroup)
  return _internal_userpermissiongroup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_userpermissiongroup(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userpermissiongroup_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.UserPermissionGroup)
}
inline std::string* UserMetaInfoV1::mutable_userpermissiongroup() {
  std::string* _s = _internal_mutable_userpermissiongroup();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.UserPermissionGroup)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_userpermissiongroup() const {
  return _impl_.userpermissiongroup_.Get();
}
inline void UserMetaInfoV1::_internal_set_userpermissiongroup(const std::string& value) {
  
  _impl_.userpermissiongroup_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_userpermissiongroup() {
  
  return _impl_.userpermissiongroup_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_userpermissiongroup() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.UserPermissionGroup)
  return _impl_.userpermissiongroup_.Release();
}
inline void UserMetaInfoV1::set_allocated_userpermissiongroup(std::string* userpermissiongroup) {
  if (userpermissiongroup != nullptr) {
    
  } else {
    
  }
  _impl_.userpermissiongroup_.SetAllocated(userpermissiongroup, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userpermissiongroup_.IsDefault()) {
    _impl_.userpermissiongroup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.UserPermissionGroup)
}

// string OnlineStatus = 8;
inline void UserMetaInfoV1::clear_onlinestatus() {
  _impl_.onlinestatus_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::onlinestatus() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.OnlineStatus)
  return _internal_onlinestatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_onlinestatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.onlinestatus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.OnlineStatus)
}
inline std::string* UserMetaInfoV1::mutable_onlinestatus() {
  std::string* _s = _internal_mutable_onlinestatus();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.OnlineStatus)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_onlinestatus() const {
  return _impl_.onlinestatus_.Get();
}
inline void UserMetaInfoV1::_internal_set_onlinestatus(const std::string& value) {
  
  _impl_.onlinestatus_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_onlinestatus() {
  
  return _impl_.onlinestatus_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_onlinestatus() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.OnlineStatus)
  return _impl_.onlinestatus_.Release();
}
inline void UserMetaInfoV1::set_allocated_onlinestatus(std::string* onlinestatus) {
  if (onlinestatus != nullptr) {
    
  } else {
    
  }
  _impl_.onlinestatus_.SetAllocated(onlinestatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.onlinestatus_.IsDefault()) {
    _impl_.onlinestatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.OnlineStatus)
}

// -------------------------------------------------------------------

// GlobalPermissionMetaInfoV1

// bool WritePermissionCreateProject = 1;
inline void GlobalPermissionMetaInfoV1::clear_writepermissioncreateproject() {
  _impl_.writepermissioncreateproject_ = false;
}
inline bool GlobalPermissionMetaInfoV1::_internal_writepermissioncreateproject() const {
  return _impl_.writepermissioncreateproject_;
}
inline bool GlobalPermissionMetaInfoV1::writepermissioncreateproject() const {
  // @@protoc_insertion_point(field_get:proto.GlobalPermissionMetaInfoV1.WritePermissionCreateProject)
  return _internal_writepermissioncreateproject();
}
inline void GlobalPermissionMetaInfoV1::_internal_set_writepermissioncreateproject(bool value) {
  
  _impl_.writepermissioncreateproject_ = value;
}
inline void GlobalPermissionMetaInfoV1::set_writepermissioncreateproject(bool value) {
  _internal_set_writepermissioncreateproject(value);
  // @@protoc_insertion_point(field_set:proto.GlobalPermissionMetaInfoV1.WritePermissionCreateProject)
}

// bool WritePermissionModifyProject = 2;
inline void GlobalPermissionMetaInfoV1::clear_writepermissionmodifyproject() {
  _impl_.writepermissionmodifyproject_ = false;
}
inline bool GlobalPermissionMetaInfoV1::_internal_writepermissionmodifyproject() const {
  return _impl_.writepermissionmodifyproject_;
}
inline bool GlobalPermissionMetaInfoV1::writepermissionmodifyproject() const {
  // @@protoc_insertion_point(field_get:proto.GlobalPermissionMetaInfoV1.WritePermissionModifyProject)
  return _internal_writepermissionmodifyproject();
}
inline void GlobalPermissionMetaInfoV1::_internal_set_writepermissionmodifyproject(bool value) {
  
  _impl_.writepermissionmodifyproject_ = value;
}
inline void GlobalPermissionMetaInfoV1::set_writepermissionmodifyproject(bool value) {
  _internal_set_writepermissionmodifyproject(value);
  // @@protoc_insertion_point(field_set:proto.GlobalPermissionMetaInfoV1.WritePermissionModifyProject)
}

// bool WritePermissionDeleteProject = 3;
inline void GlobalPermissionMetaInfoV1::clear_writepermissiondeleteproject() {
  _impl_.writepermissiondeleteproject_ = false;
}
inline bool GlobalPermissionMetaInfoV1::_internal_writepermissiondeleteproject() const {
  return _impl_.writepermissiondeleteproject_;
}
inline bool GlobalPermissionMetaInfoV1::writepermissiondeleteproject() const {
  // @@protoc_insertion_point(field_get:proto.GlobalPermissionMetaInfoV1.WritePermissionDeleteProject)
  return _internal_writepermissiondeleteproject();
}
inline void GlobalPermissionMetaInfoV1::_internal_set_writepermissiondeleteproject(bool value) {
  
  _impl_.writepermissiondeleteproject_ = value;
}
inline void GlobalPermissionMetaInfoV1::set_writepermissiondeleteproject(bool value) {
  _internal_set_writepermissiondeleteproject(value);
  // @@protoc_insertion_point(field_set:proto.GlobalPermissionMetaInfoV1.WritePermissionDeleteProject)
}

// bool ReadPerimissionQuery = 4;
inline void GlobalPermissionMetaInfoV1::clear_readperimissionquery() {
  _impl_.readperimissionquery_ = false;
}
inline bool GlobalPermissionMetaInfoV1::_internal_readperimissionquery() const {
  return _impl_.readperimissionquery_;
}
inline bool GlobalPermissionMetaInfoV1::readperimissionquery() const {
  // @@protoc_insertion_point(field_get:proto.GlobalPermissionMetaInfoV1.ReadPerimissionQuery)
  return _internal_readperimissionquery();
}
inline void GlobalPermissionMetaInfoV1::_internal_set_readperimissionquery(bool value) {
  
  _impl_.readperimissionquery_ = value;
}
inline void GlobalPermissionMetaInfoV1::set_readperimissionquery(bool value) {
  _internal_set_readperimissionquery(value);
  // @@protoc_insertion_point(field_set:proto.GlobalPermissionMetaInfoV1.ReadPerimissionQuery)
}

// -------------------------------------------------------------------

// ProjectPermissionMetaInfoV1

// bool WritePermissionAddData = 1;
inline void ProjectPermissionMetaInfoV1::clear_writepermissionadddata() {
  _impl_.writepermissionadddata_ = false;
}
inline bool ProjectPermissionMetaInfoV1::_internal_writepermissionadddata() const {
  return _impl_.writepermissionadddata_;
}
inline bool ProjectPermissionMetaInfoV1::writepermissionadddata() const {
  // @@protoc_insertion_point(field_get:proto.ProjectPermissionMetaInfoV1.WritePermissionAddData)
  return _internal_writepermissionadddata();
}
inline void ProjectPermissionMetaInfoV1::_internal_set_writepermissionadddata(bool value) {
  
  _impl_.writepermissionadddata_ = value;
}
inline void ProjectPermissionMetaInfoV1::set_writepermissionadddata(bool value) {
  _internal_set_writepermissionadddata(value);
  // @@protoc_insertion_point(field_set:proto.ProjectPermissionMetaInfoV1.WritePermissionAddData)
}

// bool WritePermissionModifyData = 2;
inline void ProjectPermissionMetaInfoV1::clear_writepermissionmodifydata() {
  _impl_.writepermissionmodifydata_ = false;
}
inline bool ProjectPermissionMetaInfoV1::_internal_writepermissionmodifydata() const {
  return _impl_.writepermissionmodifydata_;
}
inline bool ProjectPermissionMetaInfoV1::writepermissionmodifydata() const {
  // @@protoc_insertion_point(field_get:proto.ProjectPermissionMetaInfoV1.WritePermissionModifyData)
  return _internal_writepermissionmodifydata();
}
inline void ProjectPermissionMetaInfoV1::_internal_set_writepermissionmodifydata(bool value) {
  
  _impl_.writepermissionmodifydata_ = value;
}
inline void ProjectPermissionMetaInfoV1::set_writepermissionmodifydata(bool value) {
  _internal_set_writepermissionmodifydata(value);
  // @@protoc_insertion_point(field_set:proto.ProjectPermissionMetaInfoV1.WritePermissionModifyData)
}

// bool WritePermissionDeleteData = 3;
inline void ProjectPermissionMetaInfoV1::clear_writepermissiondeletedata() {
  _impl_.writepermissiondeletedata_ = false;
}
inline bool ProjectPermissionMetaInfoV1::_internal_writepermissiondeletedata() const {
  return _impl_.writepermissiondeletedata_;
}
inline bool ProjectPermissionMetaInfoV1::writepermissiondeletedata() const {
  // @@protoc_insertion_point(field_get:proto.ProjectPermissionMetaInfoV1.WritePermissionDeleteData)
  return _internal_writepermissiondeletedata();
}
inline void ProjectPermissionMetaInfoV1::_internal_set_writepermissiondeletedata(bool value) {
  
  _impl_.writepermissiondeletedata_ = value;
}
inline void ProjectPermissionMetaInfoV1::set_writepermissiondeletedata(bool value) {
  _internal_set_writepermissiondeletedata(value);
  // @@protoc_insertion_point(field_set:proto.ProjectPermissionMetaInfoV1.WritePermissionDeleteData)
}

// bool ReadPerimissionQuery = 4;
inline void ProjectPermissionMetaInfoV1::clear_readperimissionquery() {
  _impl_.readperimissionquery_ = false;
}
inline bool ProjectPermissionMetaInfoV1::_internal_readperimissionquery() const {
  return _impl_.readperimissionquery_;
}
inline bool ProjectPermissionMetaInfoV1::readperimissionquery() const {
  // @@protoc_insertion_point(field_get:proto.ProjectPermissionMetaInfoV1.ReadPerimissionQuery)
  return _internal_readperimissionquery();
}
inline void ProjectPermissionMetaInfoV1::_internal_set_readperimissionquery(bool value) {
  
  _impl_.readperimissionquery_ = value;
}
inline void ProjectPermissionMetaInfoV1::set_readperimissionquery(bool value) {
  _internal_set_readperimissionquery(value);
  // @@protoc_insertion_point(field_set:proto.ProjectPermissionMetaInfoV1.ReadPerimissionQuery)
}

// -------------------------------------------------------------------

// PermissionGroupMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool PermissionGroupMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool PermissionGroupMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void PermissionGroupMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& PermissionGroupMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& PermissionGroupMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Base)
  return _internal_base();
}
inline void PermissionGroupMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionGroupMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Base)
  return _msg;
}
inline void PermissionGroupMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Base)
}

// string Name = 2;
inline void PermissionGroupMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PermissionGroupMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionGroupMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PermissionGroupMetaInfoV1.Name)
}
inline std::string* PermissionGroupMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Name)
  return _s;
}
inline const std::string& PermissionGroupMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PermissionGroupMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void PermissionGroupMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Name)
}

// string Description = 3;
inline void PermissionGroupMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PermissionGroupMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionGroupMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PermissionGroupMetaInfoV1.Description)
}
inline std::string* PermissionGroupMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Description)
  return _s;
}
inline const std::string& PermissionGroupMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void PermissionGroupMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void PermissionGroupMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Description)
}

// .proto.GlobalPermissionMetaInfoV1 GlobalPermission = 4;
inline bool PermissionGroupMetaInfoV1::_internal_has_globalpermission() const {
  return this != internal_default_instance() && _impl_.globalpermission_ != nullptr;
}
inline bool PermissionGroupMetaInfoV1::has_globalpermission() const {
  return _internal_has_globalpermission();
}
inline void PermissionGroupMetaInfoV1::clear_globalpermission() {
  if (GetArenaForAllocation() == nullptr && _impl_.globalpermission_ != nullptr) {
    delete _impl_.globalpermission_;
  }
  _impl_.globalpermission_ = nullptr;
}
inline const ::proto::GlobalPermissionMetaInfoV1& PermissionGroupMetaInfoV1::_internal_globalpermission() const {
  const ::proto::GlobalPermissionMetaInfoV1* p = _impl_.globalpermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::GlobalPermissionMetaInfoV1&>(
      ::proto::_GlobalPermissionMetaInfoV1_default_instance_);
}
inline const ::proto::GlobalPermissionMetaInfoV1& PermissionGroupMetaInfoV1::globalpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.GlobalPermission)
  return _internal_globalpermission();
}
inline void PermissionGroupMetaInfoV1::unsafe_arena_set_allocated_globalpermission(
    ::proto::GlobalPermissionMetaInfoV1* globalpermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.globalpermission_);
  }
  _impl_.globalpermission_ = globalpermission;
  if (globalpermission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionGroupMetaInfoV1.GlobalPermission)
}
inline ::proto::GlobalPermissionMetaInfoV1* PermissionGroupMetaInfoV1::release_globalpermission() {
  
  ::proto::GlobalPermissionMetaInfoV1* temp = _impl_.globalpermission_;
  _impl_.globalpermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::GlobalPermissionMetaInfoV1* PermissionGroupMetaInfoV1::unsafe_arena_release_globalpermission() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.GlobalPermission)
  
  ::proto::GlobalPermissionMetaInfoV1* temp = _impl_.globalpermission_;
  _impl_.globalpermission_ = nullptr;
  return temp;
}
inline ::proto::GlobalPermissionMetaInfoV1* PermissionGroupMetaInfoV1::_internal_mutable_globalpermission() {
  
  if (_impl_.globalpermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::GlobalPermissionMetaInfoV1>(GetArenaForAllocation());
    _impl_.globalpermission_ = p;
  }
  return _impl_.globalpermission_;
}
inline ::proto::GlobalPermissionMetaInfoV1* PermissionGroupMetaInfoV1::mutable_globalpermission() {
  ::proto::GlobalPermissionMetaInfoV1* _msg = _internal_mutable_globalpermission();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.GlobalPermission)
  return _msg;
}
inline void PermissionGroupMetaInfoV1::set_allocated_globalpermission(::proto::GlobalPermissionMetaInfoV1* globalpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.globalpermission_;
  }
  if (globalpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(globalpermission);
    if (message_arena != submessage_arena) {
      globalpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalpermission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.globalpermission_ = globalpermission;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.GlobalPermission)
}

// .proto.ProjectPermissionMetaInfoV1 ProjectPermission = 5;
inline bool PermissionGroupMetaInfoV1::_internal_has_projectpermission() const {
  return this != internal_default_instance() && _impl_.projectpermission_ != nullptr;
}
inline bool PermissionGroupMetaInfoV1::has_projectpermission() const {
  return _internal_has_projectpermission();
}
inline void PermissionGroupMetaInfoV1::clear_projectpermission() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectpermission_ != nullptr) {
    delete _impl_.projectpermission_;
  }
  _impl_.projectpermission_ = nullptr;
}
inline const ::proto::ProjectPermissionMetaInfoV1& PermissionGroupMetaInfoV1::_internal_projectpermission() const {
  const ::proto::ProjectPermissionMetaInfoV1* p = _impl_.projectpermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectPermissionMetaInfoV1&>(
      ::proto::_ProjectPermissionMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectPermissionMetaInfoV1& PermissionGroupMetaInfoV1::projectpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.ProjectPermission)
  return _internal_projectpermission();
}
inline void PermissionGroupMetaInfoV1::unsafe_arena_set_allocated_projectpermission(
    ::proto::ProjectPermissionMetaInfoV1* projectpermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectpermission_);
  }
  _impl_.projectpermission_ = projectpermission;
  if (projectpermission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionGroupMetaInfoV1.ProjectPermission)
}
inline ::proto::ProjectPermissionMetaInfoV1* PermissionGroupMetaInfoV1::release_projectpermission() {
  
  ::proto::ProjectPermissionMetaInfoV1* temp = _impl_.projectpermission_;
  _impl_.projectpermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectPermissionMetaInfoV1* PermissionGroupMetaInfoV1::unsafe_arena_release_projectpermission() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.ProjectPermission)
  
  ::proto::ProjectPermissionMetaInfoV1* temp = _impl_.projectpermission_;
  _impl_.projectpermission_ = nullptr;
  return temp;
}
inline ::proto::ProjectPermissionMetaInfoV1* PermissionGroupMetaInfoV1::_internal_mutable_projectpermission() {
  
  if (_impl_.projectpermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectPermissionMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectpermission_ = p;
  }
  return _impl_.projectpermission_;
}
inline ::proto::ProjectPermissionMetaInfoV1* PermissionGroupMetaInfoV1::mutable_projectpermission() {
  ::proto::ProjectPermissionMetaInfoV1* _msg = _internal_mutable_projectpermission();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.ProjectPermission)
  return _msg;
}
inline void PermissionGroupMetaInfoV1::set_allocated_projectpermission(::proto::ProjectPermissionMetaInfoV1* projectpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projectpermission_;
  }
  if (projectpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projectpermission);
    if (message_arena != submessage_arena) {
      projectpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectpermission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectpermission_ = projectpermission;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.ProjectPermission)
}

// -------------------------------------------------------------------

// UserPermissionOverrideMetaInfoV1

// .proto.GlobalPermissionMetaInfoV1 GlobalPermission = 1;
inline bool UserPermissionOverrideMetaInfoV1::_internal_has_globalpermission() const {
  return this != internal_default_instance() && _impl_.globalpermission_ != nullptr;
}
inline bool UserPermissionOverrideMetaInfoV1::has_globalpermission() const {
  return _internal_has_globalpermission();
}
inline void UserPermissionOverrideMetaInfoV1::clear_globalpermission() {
  if (GetArenaForAllocation() == nullptr && _impl_.globalpermission_ != nullptr) {
    delete _impl_.globalpermission_;
  }
  _impl_.globalpermission_ = nullptr;
}
inline const ::proto::GlobalPermissionMetaInfoV1& UserPermissionOverrideMetaInfoV1::_internal_globalpermission() const {
  const ::proto::GlobalPermissionMetaInfoV1* p = _impl_.globalpermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::GlobalPermissionMetaInfoV1&>(
      ::proto::_GlobalPermissionMetaInfoV1_default_instance_);
}
inline const ::proto::GlobalPermissionMetaInfoV1& UserPermissionOverrideMetaInfoV1::globalpermission() const {
  // @@protoc_insertion_point(field_get:proto.UserPermissionOverrideMetaInfoV1.GlobalPermission)
  return _internal_globalpermission();
}
inline void UserPermissionOverrideMetaInfoV1::unsafe_arena_set_allocated_globalpermission(
    ::proto::GlobalPermissionMetaInfoV1* globalpermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.globalpermission_);
  }
  _impl_.globalpermission_ = globalpermission;
  if (globalpermission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserPermissionOverrideMetaInfoV1.GlobalPermission)
}
inline ::proto::GlobalPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::release_globalpermission() {
  
  ::proto::GlobalPermissionMetaInfoV1* temp = _impl_.globalpermission_;
  _impl_.globalpermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::GlobalPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::unsafe_arena_release_globalpermission() {
  // @@protoc_insertion_point(field_release:proto.UserPermissionOverrideMetaInfoV1.GlobalPermission)
  
  ::proto::GlobalPermissionMetaInfoV1* temp = _impl_.globalpermission_;
  _impl_.globalpermission_ = nullptr;
  return temp;
}
inline ::proto::GlobalPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::_internal_mutable_globalpermission() {
  
  if (_impl_.globalpermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::GlobalPermissionMetaInfoV1>(GetArenaForAllocation());
    _impl_.globalpermission_ = p;
  }
  return _impl_.globalpermission_;
}
inline ::proto::GlobalPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::mutable_globalpermission() {
  ::proto::GlobalPermissionMetaInfoV1* _msg = _internal_mutable_globalpermission();
  // @@protoc_insertion_point(field_mutable:proto.UserPermissionOverrideMetaInfoV1.GlobalPermission)
  return _msg;
}
inline void UserPermissionOverrideMetaInfoV1::set_allocated_globalpermission(::proto::GlobalPermissionMetaInfoV1* globalpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.globalpermission_;
  }
  if (globalpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(globalpermission);
    if (message_arena != submessage_arena) {
      globalpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, globalpermission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.globalpermission_ = globalpermission;
  // @@protoc_insertion_point(field_set_allocated:proto.UserPermissionOverrideMetaInfoV1.GlobalPermission)
}

// .proto.ProjectPermissionMetaInfoV1 ProjectPermission = 2;
inline bool UserPermissionOverrideMetaInfoV1::_internal_has_projectpermission() const {
  return this != internal_default_instance() && _impl_.projectpermission_ != nullptr;
}
inline bool UserPermissionOverrideMetaInfoV1::has_projectpermission() const {
  return _internal_has_projectpermission();
}
inline void UserPermissionOverrideMetaInfoV1::clear_projectpermission() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectpermission_ != nullptr) {
    delete _impl_.projectpermission_;
  }
  _impl_.projectpermission_ = nullptr;
}
inline const ::proto::ProjectPermissionMetaInfoV1& UserPermissionOverrideMetaInfoV1::_internal_projectpermission() const {
  const ::proto::ProjectPermissionMetaInfoV1* p = _impl_.projectpermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectPermissionMetaInfoV1&>(
      ::proto::_ProjectPermissionMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectPermissionMetaInfoV1& UserPermissionOverrideMetaInfoV1::projectpermission() const {
  // @@protoc_insertion_point(field_get:proto.UserPermissionOverrideMetaInfoV1.ProjectPermission)
  return _internal_projectpermission();
}
inline void UserPermissionOverrideMetaInfoV1::unsafe_arena_set_allocated_projectpermission(
    ::proto::ProjectPermissionMetaInfoV1* projectpermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectpermission_);
  }
  _impl_.projectpermission_ = projectpermission;
  if (projectpermission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserPermissionOverrideMetaInfoV1.ProjectPermission)
}
inline ::proto::ProjectPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::release_projectpermission() {
  
  ::proto::ProjectPermissionMetaInfoV1* temp = _impl_.projectpermission_;
  _impl_.projectpermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::unsafe_arena_release_projectpermission() {
  // @@protoc_insertion_point(field_release:proto.UserPermissionOverrideMetaInfoV1.ProjectPermission)
  
  ::proto::ProjectPermissionMetaInfoV1* temp = _impl_.projectpermission_;
  _impl_.projectpermission_ = nullptr;
  return temp;
}
inline ::proto::ProjectPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::_internal_mutable_projectpermission() {
  
  if (_impl_.projectpermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectPermissionMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectpermission_ = p;
  }
  return _impl_.projectpermission_;
}
inline ::proto::ProjectPermissionMetaInfoV1* UserPermissionOverrideMetaInfoV1::mutable_projectpermission() {
  ::proto::ProjectPermissionMetaInfoV1* _msg = _internal_mutable_projectpermission();
  // @@protoc_insertion_point(field_mutable:proto.UserPermissionOverrideMetaInfoV1.ProjectPermission)
  return _msg;
}
inline void UserPermissionOverrideMetaInfoV1::set_allocated_projectpermission(::proto::ProjectPermissionMetaInfoV1* projectpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projectpermission_;
  }
  if (projectpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projectpermission);
    if (message_arena != submessage_arena) {
      projectpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectpermission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectpermission_ = projectpermission;
  // @@protoc_insertion_point(field_set_allocated:proto.UserPermissionOverrideMetaInfoV1.ProjectPermission)
}

// -------------------------------------------------------------------

// ProjectMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool ProjectMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void ProjectMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& ProjectMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& ProjectMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Base)
  return _internal_base();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Base)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Base)
}

// string Name = 2;
inline void ProjectMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.Name)
}
inline std::string* ProjectMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Name)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Name)
}

// string Description = 3;
inline void ProjectMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.Description)
}
inline std::string* ProjectMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Description)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Description)
}

// string Creator = 4;
inline void ProjectMetaInfoV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.Creator)
}
inline std::string* ProjectMetaInfoV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Creator)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Creator)
  return _impl_.creator_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Creator)
}

// .google.protobuf.Timestamp CreateTime = 5;
inline bool ProjectMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.CreateTime)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.CreateTime)
}

// .google.protobuf.Timestamp LastModifiedTime = 6;
inline bool ProjectMetaInfoV1::_internal_has_lastmodifiedtime() const {
  return this != internal_default_instance() && _impl_.lastmodifiedtime_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_lastmodifiedtime() const {
  return _internal_has_lastmodifiedtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::_internal_lastmodifiedtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lastmodifiedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::lastmodifiedtime() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.LastModifiedTime)
  return _internal_lastmodifiedtime();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_lastmodifiedtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  if (lastmodifiedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.LastModifiedTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::release_lastmodifiedtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::unsafe_arena_release_lastmodifiedtime() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.LastModifiedTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::_internal_mutable_lastmodifiedtime() {
  
  if (_impl_.lastmodifiedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lastmodifiedtime_ = p;
  }
  return _impl_.lastmodifiedtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::mutable_lastmodifiedtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lastmodifiedtime();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.LastModifiedTime)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  if (lastmodifiedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastmodifiedtime));
    if (message_arena != submessage_arena) {
      lastmodifiedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastmodifiedtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.LastModifiedTime)
}

// repeated string SwcList = 7;
inline int ProjectMetaInfoV1::_internal_swclist_size() const {
  return _impl_.swclist_.size();
}
inline int ProjectMetaInfoV1::swclist_size() const {
  return _internal_swclist_size();
}
inline void ProjectMetaInfoV1::clear_swclist() {
  _impl_.swclist_.Clear();
}
inline std::string* ProjectMetaInfoV1::add_swclist() {
  std::string* _s = _internal_add_swclist();
  // @@protoc_insertion_point(field_add_mutable:proto.ProjectMetaInfoV1.SwcList)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_swclist(int index) const {
  return _impl_.swclist_.Get(index);
}
inline const std::string& ProjectMetaInfoV1::swclist(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.SwcList)
  return _internal_swclist(index);
}
inline std::string* ProjectMetaInfoV1::mutable_swclist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.SwcList)
  return _impl_.swclist_.Mutable(index);
}
inline void ProjectMetaInfoV1::set_swclist(int index, const std::string& value) {
  _impl_.swclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::set_swclist(int index, std::string&& value) {
  _impl_.swclist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::set_swclist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.swclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::set_swclist(int index, const char* value, size_t size) {
  _impl_.swclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ProjectMetaInfoV1.SwcList)
}
inline std::string* ProjectMetaInfoV1::_internal_add_swclist() {
  return _impl_.swclist_.Add();
}
inline void ProjectMetaInfoV1::add_swclist(const std::string& value) {
  _impl_.swclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::add_swclist(std::string&& value) {
  _impl_.swclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::add_swclist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.swclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::add_swclist(const char* value, size_t size) {
  _impl_.swclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.ProjectMetaInfoV1.SwcList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProjectMetaInfoV1::swclist() const {
  // @@protoc_insertion_point(field_list:proto.ProjectMetaInfoV1.SwcList)
  return _impl_.swclist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProjectMetaInfoV1::mutable_swclist() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProjectMetaInfoV1.SwcList)
  return &_impl_.swclist_;
}

// repeated .proto.ProjectPermissionMetaInfoV1 UserPermissionOverride = 8;
inline int ProjectMetaInfoV1::_internal_userpermissionoverride_size() const {
  return _impl_.userpermissionoverride_.size();
}
inline int ProjectMetaInfoV1::userpermissionoverride_size() const {
  return _internal_userpermissionoverride_size();
}
inline void ProjectMetaInfoV1::clear_userpermissionoverride() {
  _impl_.userpermissionoverride_.Clear();
}
inline ::proto::ProjectPermissionMetaInfoV1* ProjectMetaInfoV1::mutable_userpermissionoverride(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.UserPermissionOverride)
  return _impl_.userpermissionoverride_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectPermissionMetaInfoV1 >*
ProjectMetaInfoV1::mutable_userpermissionoverride() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProjectMetaInfoV1.UserPermissionOverride)
  return &_impl_.userpermissionoverride_;
}
inline const ::proto::ProjectPermissionMetaInfoV1& ProjectMetaInfoV1::_internal_userpermissionoverride(int index) const {
  return _impl_.userpermissionoverride_.Get(index);
}
inline const ::proto::ProjectPermissionMetaInfoV1& ProjectMetaInfoV1::userpermissionoverride(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.UserPermissionOverride)
  return _internal_userpermissionoverride(index);
}
inline ::proto::ProjectPermissionMetaInfoV1* ProjectMetaInfoV1::_internal_add_userpermissionoverride() {
  return _impl_.userpermissionoverride_.Add();
}
inline ::proto::ProjectPermissionMetaInfoV1* ProjectMetaInfoV1::add_userpermissionoverride() {
  ::proto::ProjectPermissionMetaInfoV1* _add = _internal_add_userpermissionoverride();
  // @@protoc_insertion_point(field_add:proto.ProjectMetaInfoV1.UserPermissionOverride)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectPermissionMetaInfoV1 >&
ProjectMetaInfoV1::userpermissionoverride() const {
  // @@protoc_insertion_point(field_list:proto.ProjectMetaInfoV1.UserPermissionOverride)
  return _impl_.userpermissionoverride_;
}

// string WorkMode = 9;
inline void ProjectMetaInfoV1::clear_workmode() {
  _impl_.workmode_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::workmode() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.WorkMode)
  return _internal_workmode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_workmode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.workmode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.WorkMode)
}
inline std::string* ProjectMetaInfoV1::mutable_workmode() {
  std::string* _s = _internal_mutable_workmode();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.WorkMode)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_workmode() const {
  return _impl_.workmode_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_workmode(const std::string& value) {
  
  _impl_.workmode_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_workmode() {
  
  return _impl_.workmode_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_workmode() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.WorkMode)
  return _impl_.workmode_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_workmode(std::string* workmode) {
  if (workmode != nullptr) {
    
  } else {
    
  }
  _impl_.workmode_.SetAllocated(workmode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.workmode_.IsDefault()) {
    _impl_.workmode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.WorkMode)
}

// -------------------------------------------------------------------

// SwcMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void SwcMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Base)
  return _internal_base();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Base)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Base)
}

// string Name = 2;
inline void SwcMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.Name)
}
inline std::string* SwcMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Name)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SwcMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void SwcMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Name)
}

// string Description = 3;
inline void SwcMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.Description)
}
inline std::string* SwcMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Description)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SwcMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void SwcMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Description)
}

// string Creator = 4;
inline void SwcMetaInfoV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.Creator)
}
inline std::string* SwcMetaInfoV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Creator)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void SwcMetaInfoV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Creator)
  return _impl_.creator_.Release();
}
inline void SwcMetaInfoV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Creator)
}

// .google.protobuf.Timestamp CreateTime = 5;
inline bool SwcMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.CreateTime)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.CreateTime)
}

// .google.protobuf.Timestamp LastModifiedTime = 6;
inline bool SwcMetaInfoV1::_internal_has_lastmodifiedtime() const {
  return this != internal_default_instance() && _impl_.lastmodifiedtime_ != nullptr;
}
inline bool SwcMetaInfoV1::has_lastmodifiedtime() const {
  return _internal_has_lastmodifiedtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::_internal_lastmodifiedtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lastmodifiedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::lastmodifiedtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.LastModifiedTime)
  return _internal_lastmodifiedtime();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_lastmodifiedtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  if (lastmodifiedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.LastModifiedTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::release_lastmodifiedtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::unsafe_arena_release_lastmodifiedtime() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.LastModifiedTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::_internal_mutable_lastmodifiedtime() {
  
  if (_impl_.lastmodifiedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lastmodifiedtime_ = p;
  }
  return _impl_.lastmodifiedtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::mutable_lastmodifiedtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lastmodifiedtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.LastModifiedTime)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  if (lastmodifiedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastmodifiedtime));
    if (message_arena != submessage_arena) {
      lastmodifiedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastmodifiedtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.LastModifiedTime)
}

// -------------------------------------------------------------------

// SwcNodeDataV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcNodeDataV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcNodeDataV1::has_base() const {
  return _internal_has_base();
}
inline void SwcNodeDataV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcNodeDataV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcNodeDataV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.Base)
  return _internal_base();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.Base)
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.Base)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.Base)
}

// string SwcData = 2;
inline void SwcNodeDataV1::clear_swcdata() {
  _impl_.swcdata_.ClearToEmpty();
}
inline const std::string& SwcNodeDataV1::swcdata() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.SwcData)
  return _internal_swcdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcNodeDataV1::set_swcdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcdata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcNodeDataV1.SwcData)
}
inline std::string* SwcNodeDataV1::mutable_swcdata() {
  std::string* _s = _internal_mutable_swcdata();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.SwcData)
  return _s;
}
inline const std::string& SwcNodeDataV1::_internal_swcdata() const {
  return _impl_.swcdata_.Get();
}
inline void SwcNodeDataV1::_internal_set_swcdata(const std::string& value) {
  
  _impl_.swcdata_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::_internal_mutable_swcdata() {
  
  return _impl_.swcdata_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::release_swcdata() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.SwcData)
  return _impl_.swcdata_.Release();
}
inline void SwcNodeDataV1::set_allocated_swcdata(std::string* swcdata) {
  if (swcdata != nullptr) {
    
  } else {
    
  }
  _impl_.swcdata_.SetAllocated(swcdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcdata_.IsDefault()) {
    _impl_.swcdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.SwcData)
}

// string Creator = 3;
inline void SwcNodeDataV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& SwcNodeDataV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcNodeDataV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcNodeDataV1.Creator)
}
inline std::string* SwcNodeDataV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.Creator)
  return _s;
}
inline const std::string& SwcNodeDataV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void SwcNodeDataV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.Creator)
  return _impl_.creator_.Release();
}
inline void SwcNodeDataV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.Creator)
}

// .google.protobuf.Timestamp CreateTime = 4;
inline bool SwcNodeDataV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcNodeDataV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.CreateTime)
  return _internal_createtime();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.CreateTime)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.CreateTime)
}

// .google.protobuf.Timestamp LastModifiedTime = 5;
inline bool SwcNodeDataV1::_internal_has_lastmodifiedtime() const {
  return this != internal_default_instance() && _impl_.lastmodifiedtime_ != nullptr;
}
inline bool SwcNodeDataV1::has_lastmodifiedtime() const {
  return _internal_has_lastmodifiedtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::_internal_lastmodifiedtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lastmodifiedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::lastmodifiedtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.LastModifiedTime)
  return _internal_lastmodifiedtime();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_lastmodifiedtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  if (lastmodifiedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.LastModifiedTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::release_lastmodifiedtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::unsafe_arena_release_lastmodifiedtime() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.LastModifiedTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::_internal_mutable_lastmodifiedtime() {
  
  if (_impl_.lastmodifiedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lastmodifiedtime_ = p;
  }
  return _impl_.lastmodifiedtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::mutable_lastmodifiedtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lastmodifiedtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.LastModifiedTime)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  if (lastmodifiedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastmodifiedtime));
    if (message_arena != submessage_arena) {
      lastmodifiedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastmodifiedtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.LastModifiedTime)
}

// string AnnotatorUserUuid = 6;
inline void SwcNodeDataV1::clear_annotatoruseruuid() {
  _impl_.annotatoruseruuid_.ClearToEmpty();
}
inline const std::string& SwcNodeDataV1::annotatoruseruuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.AnnotatorUserUuid)
  return _internal_annotatoruseruuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcNodeDataV1::set_annotatoruseruuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.annotatoruseruuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcNodeDataV1.AnnotatorUserUuid)
}
inline std::string* SwcNodeDataV1::mutable_annotatoruseruuid() {
  std::string* _s = _internal_mutable_annotatoruseruuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.AnnotatorUserUuid)
  return _s;
}
inline const std::string& SwcNodeDataV1::_internal_annotatoruseruuid() const {
  return _impl_.annotatoruseruuid_.Get();
}
inline void SwcNodeDataV1::_internal_set_annotatoruseruuid(const std::string& value) {
  
  _impl_.annotatoruseruuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::_internal_mutable_annotatoruseruuid() {
  
  return _impl_.annotatoruseruuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::release_annotatoruseruuid() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.AnnotatorUserUuid)
  return _impl_.annotatoruseruuid_.Release();
}
inline void SwcNodeDataV1::set_allocated_annotatoruseruuid(std::string* annotatoruseruuid) {
  if (annotatoruseruuid != nullptr) {
    
  } else {
    
  }
  _impl_.annotatoruseruuid_.SetAllocated(annotatoruseruuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.annotatoruseruuid_.IsDefault()) {
    _impl_.annotatoruseruuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.AnnotatorUserUuid)
}

// string CheckerUserUuid = 7;
inline void SwcNodeDataV1::clear_checkeruseruuid() {
  _impl_.checkeruseruuid_.ClearToEmpty();
}
inline const std::string& SwcNodeDataV1::checkeruseruuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.CheckerUserUuid)
  return _internal_checkeruseruuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcNodeDataV1::set_checkeruseruuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.checkeruseruuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcNodeDataV1.CheckerUserUuid)
}
inline std::string* SwcNodeDataV1::mutable_checkeruseruuid() {
  std::string* _s = _internal_mutable_checkeruseruuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.CheckerUserUuid)
  return _s;
}
inline const std::string& SwcNodeDataV1::_internal_checkeruseruuid() const {
  return _impl_.checkeruseruuid_.Get();
}
inline void SwcNodeDataV1::_internal_set_checkeruseruuid(const std::string& value) {
  
  _impl_.checkeruseruuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::_internal_mutable_checkeruseruuid() {
  
  return _impl_.checkeruseruuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::release_checkeruseruuid() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.CheckerUserUuid)
  return _impl_.checkeruseruuid_.Release();
}
inline void SwcNodeDataV1::set_allocated_checkeruseruuid(std::string* checkeruseruuid) {
  if (checkeruseruuid != nullptr) {
    
  } else {
    
  }
  _impl_.checkeruseruuid_.SetAllocated(checkeruseruuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.checkeruseruuid_.IsDefault()) {
    _impl_.checkeruseruuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.CheckerUserUuid)
}

// -------------------------------------------------------------------

// SwcDataV1

// repeated .proto.SwcNodeDataV1 SwcData = 1;
inline int SwcDataV1::_internal_swcdata_size() const {
  return _impl_.swcdata_.size();
}
inline int SwcDataV1::swcdata_size() const {
  return _internal_swcdata_size();
}
inline void SwcDataV1::clear_swcdata() {
  _impl_.swcdata_.Clear();
}
inline ::proto::SwcNodeDataV1* SwcDataV1::mutable_swcdata(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SwcDataV1.SwcData)
  return _impl_.swcdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >*
SwcDataV1::mutable_swcdata() {
  // @@protoc_insertion_point(field_mutable_list:proto.SwcDataV1.SwcData)
  return &_impl_.swcdata_;
}
inline const ::proto::SwcNodeDataV1& SwcDataV1::_internal_swcdata(int index) const {
  return _impl_.swcdata_.Get(index);
}
inline const ::proto::SwcNodeDataV1& SwcDataV1::swcdata(int index) const {
  // @@protoc_insertion_point(field_get:proto.SwcDataV1.SwcData)
  return _internal_swcdata(index);
}
inline ::proto::SwcNodeDataV1* SwcDataV1::_internal_add_swcdata() {
  return _impl_.swcdata_.Add();
}
inline ::proto::SwcNodeDataV1* SwcDataV1::add_swcdata() {
  ::proto::SwcNodeDataV1* _add = _internal_add_swcdata();
  // @@protoc_insertion_point(field_add:proto.SwcDataV1.SwcData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >&
SwcDataV1::swcdata() const {
  // @@protoc_insertion_point(field_list:proto.SwcDataV1.SwcData)
  return _impl_.swcdata_;
}

// -------------------------------------------------------------------

// DailyStatisticsMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool DailyStatisticsMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DailyStatisticsMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void DailyStatisticsMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& DailyStatisticsMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& DailyStatisticsMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Base)
  return _internal_base();
}
inline void DailyStatisticsMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DailyStatisticsMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Base)
  return _msg;
}
inline void DailyStatisticsMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Base)
}

// string Name = 2;
inline void DailyStatisticsMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DailyStatisticsMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DailyStatisticsMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.Name)
}
inline std::string* DailyStatisticsMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Name)
  return _s;
}
inline const std::string& DailyStatisticsMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void DailyStatisticsMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Name)
}

// string Description = 3;
inline void DailyStatisticsMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DailyStatisticsMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DailyStatisticsMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.Description)
}
inline std::string* DailyStatisticsMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Description)
  return _s;
}
inline const std::string& DailyStatisticsMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void DailyStatisticsMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Description)
}

// string Day = 4;
inline void DailyStatisticsMetaInfoV1::clear_day() {
  _impl_.day_.ClearToEmpty();
}
inline const std::string& DailyStatisticsMetaInfoV1::day() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Day)
  return _internal_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DailyStatisticsMetaInfoV1::set_day(ArgT0&& arg0, ArgT... args) {
 
 _impl_.day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.Day)
}
inline std::string* DailyStatisticsMetaInfoV1::mutable_day() {
  std::string* _s = _internal_mutable_day();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Day)
  return _s;
}
inline const std::string& DailyStatisticsMetaInfoV1::_internal_day() const {
  return _impl_.day_.Get();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_day(const std::string& value) {
  
  _impl_.day_.Set(value, GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::_internal_mutable_day() {
  
  return _impl_.day_.Mutable(GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::release_day() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Day)
  return _impl_.day_.Release();
}
inline void DailyStatisticsMetaInfoV1::set_allocated_day(std::string* day) {
  if (day != nullptr) {
    
  } else {
    
  }
  _impl_.day_.SetAllocated(day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.day_.IsDefault()) {
    _impl_.day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Day)
}

// int32 CreatedProjectNumber = 5;
inline void DailyStatisticsMetaInfoV1::clear_createdprojectnumber() {
  _impl_.createdprojectnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_createdprojectnumber() const {
  return _impl_.createdprojectnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::createdprojectnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.CreatedProjectNumber)
  return _internal_createdprojectnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_createdprojectnumber(int32_t value) {
  
  _impl_.createdprojectnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_createdprojectnumber(int32_t value) {
  _internal_set_createdprojectnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.CreatedProjectNumber)
}

// int32 CreatedSwcNumber = 6;
inline void DailyStatisticsMetaInfoV1::clear_createdswcnumber() {
  _impl_.createdswcnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_createdswcnumber() const {
  return _impl_.createdswcnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::createdswcnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.CreatedSwcNumber)
  return _internal_createdswcnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_createdswcnumber(int32_t value) {
  
  _impl_.createdswcnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_createdswcnumber(int32_t value) {
  _internal_set_createdswcnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.CreatedSwcNumber)
}

// int32 CreateSwcNodeNumber = 7;
inline void DailyStatisticsMetaInfoV1::clear_createswcnodenumber() {
  _impl_.createswcnodenumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_createswcnodenumber() const {
  return _impl_.createswcnodenumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::createswcnodenumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.CreateSwcNodeNumber)
  return _internal_createswcnodenumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_createswcnodenumber(int32_t value) {
  
  _impl_.createswcnodenumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_createswcnodenumber(int32_t value) {
  _internal_set_createswcnodenumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.CreateSwcNodeNumber)
}

// int32 DeletedProjectNumber = 8;
inline void DailyStatisticsMetaInfoV1::clear_deletedprojectnumber() {
  _impl_.deletedprojectnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_deletedprojectnumber() const {
  return _impl_.deletedprojectnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::deletedprojectnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.DeletedProjectNumber)
  return _internal_deletedprojectnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_deletedprojectnumber(int32_t value) {
  
  _impl_.deletedprojectnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_deletedprojectnumber(int32_t value) {
  _internal_set_deletedprojectnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.DeletedProjectNumber)
}

// int32 DeletedSwcNumber = 9;
inline void DailyStatisticsMetaInfoV1::clear_deletedswcnumber() {
  _impl_.deletedswcnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_deletedswcnumber() const {
  return _impl_.deletedswcnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::deletedswcnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.DeletedSwcNumber)
  return _internal_deletedswcnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_deletedswcnumber(int32_t value) {
  
  _impl_.deletedswcnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_deletedswcnumber(int32_t value) {
  _internal_set_deletedswcnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.DeletedSwcNumber)
}

// int32 DeletedSwcNodeNumber = 10;
inline void DailyStatisticsMetaInfoV1::clear_deletedswcnodenumber() {
  _impl_.deletedswcnodenumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_deletedswcnodenumber() const {
  return _impl_.deletedswcnodenumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::deletedswcnodenumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.DeletedSwcNodeNumber)
  return _internal_deletedswcnodenumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_deletedswcnodenumber(int32_t value) {
  
  _impl_.deletedswcnodenumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_deletedswcnodenumber(int32_t value) {
  _internal_set_deletedswcnodenumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.DeletedSwcNodeNumber)
}

// int32 ModifiedProjectNumber = 11;
inline void DailyStatisticsMetaInfoV1::clear_modifiedprojectnumber() {
  _impl_.modifiedprojectnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_modifiedprojectnumber() const {
  return _impl_.modifiedprojectnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::modifiedprojectnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ModifiedProjectNumber)
  return _internal_modifiedprojectnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_modifiedprojectnumber(int32_t value) {
  
  _impl_.modifiedprojectnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_modifiedprojectnumber(int32_t value) {
  _internal_set_modifiedprojectnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ModifiedProjectNumber)
}

// int32 ModifiedSwcNumber = 12;
inline void DailyStatisticsMetaInfoV1::clear_modifiedswcnumber() {
  _impl_.modifiedswcnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_modifiedswcnumber() const {
  return _impl_.modifiedswcnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::modifiedswcnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNumber)
  return _internal_modifiedswcnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_modifiedswcnumber(int32_t value) {
  
  _impl_.modifiedswcnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_modifiedswcnumber(int32_t value) {
  _internal_set_modifiedswcnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNumber)
}

// int32 ModifiedSwcNodeNumber = 13;
inline void DailyStatisticsMetaInfoV1::clear_modifiedswcnodenumber() {
  _impl_.modifiedswcnodenumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_modifiedswcnodenumber() const {
  return _impl_.modifiedswcnodenumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::modifiedswcnodenumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNodeNumber)
  return _internal_modifiedswcnodenumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_modifiedswcnodenumber(int32_t value) {
  
  _impl_.modifiedswcnodenumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_modifiedswcnodenumber(int32_t value) {
  _internal_set_modifiedswcnodenumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNodeNumber)
}

// int32 ProjectQueryNumber = 14;
inline void DailyStatisticsMetaInfoV1::clear_projectquerynumber() {
  _impl_.projectquerynumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_projectquerynumber() const {
  return _impl_.projectquerynumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::projectquerynumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ProjectQueryNumber)
  return _internal_projectquerynumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_projectquerynumber(int32_t value) {
  
  _impl_.projectquerynumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_projectquerynumber(int32_t value) {
  _internal_set_projectquerynumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ProjectQueryNumber)
}

// int32 SwcQueryNumber = 15;
inline void DailyStatisticsMetaInfoV1::clear_swcquerynumber() {
  _impl_.swcquerynumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_swcquerynumber() const {
  return _impl_.swcquerynumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::swcquerynumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.SwcQueryNumber)
  return _internal_swcquerynumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_swcquerynumber(int32_t value) {
  
  _impl_.swcquerynumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_swcquerynumber(int32_t value) {
  _internal_set_swcquerynumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.SwcQueryNumber)
}

// int32 NodeQueryNumber = 16;
inline void DailyStatisticsMetaInfoV1::clear_nodequerynumber() {
  _impl_.nodequerynumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_nodequerynumber() const {
  return _impl_.nodequerynumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::nodequerynumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.NodeQueryNumber)
  return _internal_nodequerynumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_nodequerynumber(int32_t value) {
  
  _impl_.nodequerynumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_nodequerynumber(int32_t value) {
  _internal_set_nodequerynumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.NodeQueryNumber)
}

// int32 ActiveUserNumber = 17;
inline void DailyStatisticsMetaInfoV1::clear_activeusernumber() {
  _impl_.activeusernumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_activeusernumber() const {
  return _impl_.activeusernumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::activeusernumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ActiveUserNumber)
  return _internal_activeusernumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_activeusernumber(int32_t value) {
  
  _impl_.activeusernumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_activeusernumber(int32_t value) {
  _internal_set_activeusernumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ActiveUserNumber)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2fMessage_2eproto
