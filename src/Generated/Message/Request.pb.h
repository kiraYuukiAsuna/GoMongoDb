// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message/Request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2fRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2fRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Message/Message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2fRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2fRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2fRequest_2eproto;
namespace proto {
class BackupFullDatabaseRequest;
struct BackupFullDatabaseRequestDefaultTypeInternal;
extern BackupFullDatabaseRequestDefaultTypeInternal _BackupFullDatabaseRequest_default_instance_;
class ChangeUserPermissionGroupRequest;
struct ChangeUserPermissionGroupRequestDefaultTypeInternal;
extern ChangeUserPermissionGroupRequestDefaultTypeInternal _ChangeUserPermissionGroupRequest_default_instance_;
class CreateDailyStatisticsRequest;
struct CreateDailyStatisticsRequestDefaultTypeInternal;
extern CreateDailyStatisticsRequestDefaultTypeInternal _CreateDailyStatisticsRequest_default_instance_;
class CreateProjectRequest;
struct CreateProjectRequestDefaultTypeInternal;
extern CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
class CreateSwcNodeDataRequest;
struct CreateSwcNodeDataRequestDefaultTypeInternal;
extern CreateSwcNodeDataRequestDefaultTypeInternal _CreateSwcNodeDataRequest_default_instance_;
class CreateSwcRequest;
struct CreateSwcRequestDefaultTypeInternal;
extern CreateSwcRequestDefaultTypeInternal _CreateSwcRequest_default_instance_;
class CreateUserRequest;
struct CreateUserRequestDefaultTypeInternal;
extern CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
class DeleteDailyStatisticsRequest;
struct DeleteDailyStatisticsRequestDefaultTypeInternal;
extern DeleteDailyStatisticsRequestDefaultTypeInternal _DeleteDailyStatisticsRequest_default_instance_;
class DeleteProjectRequest;
struct DeleteProjectRequestDefaultTypeInternal;
extern DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
class DeleteSwcNodeDataRequest;
struct DeleteSwcNodeDataRequestDefaultTypeInternal;
extern DeleteSwcNodeDataRequestDefaultTypeInternal _DeleteSwcNodeDataRequest_default_instance_;
class DeleteSwcRequest;
struct DeleteSwcRequestDefaultTypeInternal;
extern DeleteSwcRequestDefaultTypeInternal _DeleteSwcRequest_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class GetAllDailyStatisticsRequest;
struct GetAllDailyStatisticsRequestDefaultTypeInternal;
extern GetAllDailyStatisticsRequestDefaultTypeInternal _GetAllDailyStatisticsRequest_default_instance_;
class GetAllPermissionGroupRequest;
struct GetAllPermissionGroupRequestDefaultTypeInternal;
extern GetAllPermissionGroupRequestDefaultTypeInternal _GetAllPermissionGroupRequest_default_instance_;
class GetAllProjectRequest;
struct GetAllProjectRequestDefaultTypeInternal;
extern GetAllProjectRequestDefaultTypeInternal _GetAllProjectRequest_default_instance_;
class GetAllSwcMetaInfoRequest;
struct GetAllSwcMetaInfoRequestDefaultTypeInternal;
extern GetAllSwcMetaInfoRequestDefaultTypeInternal _GetAllSwcMetaInfoRequest_default_instance_;
class GetAllUserRequest;
struct GetAllUserRequestDefaultTypeInternal;
extern GetAllUserRequestDefaultTypeInternal _GetAllUserRequest_default_instance_;
class GetDailyStatisticsRequest;
struct GetDailyStatisticsRequestDefaultTypeInternal;
extern GetDailyStatisticsRequestDefaultTypeInternal _GetDailyStatisticsRequest_default_instance_;
class GetPermissionGroupRequest;
struct GetPermissionGroupRequestDefaultTypeInternal;
extern GetPermissionGroupRequestDefaultTypeInternal _GetPermissionGroupRequest_default_instance_;
class GetProjectRequest;
struct GetProjectRequestDefaultTypeInternal;
extern GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
class GetSwcFullNodeDataRequest;
struct GetSwcFullNodeDataRequestDefaultTypeInternal;
extern GetSwcFullNodeDataRequestDefaultTypeInternal _GetSwcFullNodeDataRequest_default_instance_;
class GetSwcMetaInfoRequest;
struct GetSwcMetaInfoRequestDefaultTypeInternal;
extern GetSwcMetaInfoRequestDefaultTypeInternal _GetSwcMetaInfoRequest_default_instance_;
class GetSwcNodeDataListByTimeAndUserRequest;
struct GetSwcNodeDataListByTimeAndUserRequestDefaultTypeInternal;
extern GetSwcNodeDataListByTimeAndUserRequestDefaultTypeInternal _GetSwcNodeDataListByTimeAndUserRequest_default_instance_;
class GetSwcNodeDataRequest;
struct GetSwcNodeDataRequestDefaultTypeInternal;
extern GetSwcNodeDataRequestDefaultTypeInternal _GetSwcNodeDataRequest_default_instance_;
class GetUserPermissionGroupRequest;
struct GetUserPermissionGroupRequestDefaultTypeInternal;
extern GetUserPermissionGroupRequestDefaultTypeInternal _GetUserPermissionGroupRequest_default_instance_;
class GetUserRequest;
struct GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class UpdateDailyStatisticsRequest;
struct UpdateDailyStatisticsRequestDefaultTypeInternal;
extern UpdateDailyStatisticsRequestDefaultTypeInternal _UpdateDailyStatisticsRequest_default_instance_;
class UpdateProjectRequest;
struct UpdateProjectRequestDefaultTypeInternal;
extern UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
class UpdateSwcNodeDataRequest;
struct UpdateSwcNodeDataRequestDefaultTypeInternal;
extern UpdateSwcNodeDataRequestDefaultTypeInternal _UpdateSwcNodeDataRequest_default_instance_;
class UpdateSwcRequest;
struct UpdateSwcRequestDefaultTypeInternal;
extern UpdateSwcRequestDefaultTypeInternal _UpdateSwcRequest_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UserLoginRequest;
struct UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLogoutRequest;
struct UserLogoutRequestDefaultTypeInternal;
extern UserLogoutRequestDefaultTypeInternal _UserLogoutRequest_default_instance_;
class UserOnlineHeartBeatNotification;
struct UserOnlineHeartBeatNotificationDefaultTypeInternal;
extern UserOnlineHeartBeatNotificationDefaultTypeInternal _UserOnlineHeartBeatNotification_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BackupFullDatabaseRequest* Arena::CreateMaybeMessage<::proto::BackupFullDatabaseRequest>(Arena*);
template<> ::proto::ChangeUserPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::ChangeUserPermissionGroupRequest>(Arena*);
template<> ::proto::CreateDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::CreateDailyStatisticsRequest>(Arena*);
template<> ::proto::CreateProjectRequest* Arena::CreateMaybeMessage<::proto::CreateProjectRequest>(Arena*);
template<> ::proto::CreateSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::CreateSwcNodeDataRequest>(Arena*);
template<> ::proto::CreateSwcRequest* Arena::CreateMaybeMessage<::proto::CreateSwcRequest>(Arena*);
template<> ::proto::CreateUserRequest* Arena::CreateMaybeMessage<::proto::CreateUserRequest>(Arena*);
template<> ::proto::DeleteDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::DeleteDailyStatisticsRequest>(Arena*);
template<> ::proto::DeleteProjectRequest* Arena::CreateMaybeMessage<::proto::DeleteProjectRequest>(Arena*);
template<> ::proto::DeleteSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::DeleteSwcNodeDataRequest>(Arena*);
template<> ::proto::DeleteSwcRequest* Arena::CreateMaybeMessage<::proto::DeleteSwcRequest>(Arena*);
template<> ::proto::DeleteUserRequest* Arena::CreateMaybeMessage<::proto::DeleteUserRequest>(Arena*);
template<> ::proto::GetAllDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::GetAllDailyStatisticsRequest>(Arena*);
template<> ::proto::GetAllPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::GetAllPermissionGroupRequest>(Arena*);
template<> ::proto::GetAllProjectRequest* Arena::CreateMaybeMessage<::proto::GetAllProjectRequest>(Arena*);
template<> ::proto::GetAllSwcMetaInfoRequest* Arena::CreateMaybeMessage<::proto::GetAllSwcMetaInfoRequest>(Arena*);
template<> ::proto::GetAllUserRequest* Arena::CreateMaybeMessage<::proto::GetAllUserRequest>(Arena*);
template<> ::proto::GetDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::GetDailyStatisticsRequest>(Arena*);
template<> ::proto::GetPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::GetPermissionGroupRequest>(Arena*);
template<> ::proto::GetProjectRequest* Arena::CreateMaybeMessage<::proto::GetProjectRequest>(Arena*);
template<> ::proto::GetSwcFullNodeDataRequest* Arena::CreateMaybeMessage<::proto::GetSwcFullNodeDataRequest>(Arena*);
template<> ::proto::GetSwcMetaInfoRequest* Arena::CreateMaybeMessage<::proto::GetSwcMetaInfoRequest>(Arena*);
template<> ::proto::GetSwcNodeDataListByTimeAndUserRequest* Arena::CreateMaybeMessage<::proto::GetSwcNodeDataListByTimeAndUserRequest>(Arena*);
template<> ::proto::GetSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::GetSwcNodeDataRequest>(Arena*);
template<> ::proto::GetUserPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::GetUserPermissionGroupRequest>(Arena*);
template<> ::proto::GetUserRequest* Arena::CreateMaybeMessage<::proto::GetUserRequest>(Arena*);
template<> ::proto::UpdateDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::UpdateDailyStatisticsRequest>(Arena*);
template<> ::proto::UpdateProjectRequest* Arena::CreateMaybeMessage<::proto::UpdateProjectRequest>(Arena*);
template<> ::proto::UpdateSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::UpdateSwcNodeDataRequest>(Arena*);
template<> ::proto::UpdateSwcRequest* Arena::CreateMaybeMessage<::proto::UpdateSwcRequest>(Arena*);
template<> ::proto::UpdateUserRequest* Arena::CreateMaybeMessage<::proto::UpdateUserRequest>(Arena*);
template<> ::proto::UserLoginRequest* Arena::CreateMaybeMessage<::proto::UserLoginRequest>(Arena*);
template<> ::proto::UserLogoutRequest* Arena::CreateMaybeMessage<::proto::UserLogoutRequest>(Arena*);
template<> ::proto::UserOnlineHeartBeatNotification* Arena::CreateMaybeMessage<::proto::UserOnlineHeartBeatNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CreateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateUserRequest) */ {
 public:
  inline CreateUserRequest() : CreateUserRequest(nullptr) {}
  ~CreateUserRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRequest(const CreateUserRequest& from);
  CreateUserRequest(CreateUserRequest&& from) noexcept
    : CreateUserRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRequest& operator=(CreateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRequest*>(
               &_CreateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateUserRequest& a, CreateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUserRequest& from) {
    CreateUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateUserRequest";
  }
  protected:
  explicit CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  ~DeleteUserRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteUserRequest& from) {
    DeleteUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateUserRequest& from) {
    UpdateUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  ~GetUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserRequest& from) {
    GetUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllUserRequest) */ {
 public:
  inline GetAllUserRequest() : GetAllUserRequest(nullptr) {}
  ~GetAllUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllUserRequest(const GetAllUserRequest& from);
  GetAllUserRequest(GetAllUserRequest&& from) noexcept
    : GetAllUserRequest() {
    *this = ::std::move(from);
  }

  inline GetAllUserRequest& operator=(const GetAllUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllUserRequest& operator=(GetAllUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllUserRequest*>(
               &_GetAllUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAllUserRequest& a, GetAllUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllUserRequest& from) {
    GetAllUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllUserRequest";
  }
  protected:
  explicit GetAllUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserLoginRequest) */ {
 public:
  inline UserLoginRequest() : UserLoginRequest(nullptr) {}
  ~UserLoginRequest() override;
  explicit PROTOBUF_CONSTEXPR UserLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginRequest(const UserLoginRequest& from);
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginRequest& from) {
    UserLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserLoginRequest";
  }
  protected:
  explicit UserLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string UserName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:proto.UserLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UserLogoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserLogoutRequest) */ {
 public:
  inline UserLogoutRequest() : UserLogoutRequest(nullptr) {}
  ~UserLogoutRequest() override;
  explicit PROTOBUF_CONSTEXPR UserLogoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogoutRequest(const UserLogoutRequest& from);
  UserLogoutRequest(UserLogoutRequest&& from) noexcept
    : UserLogoutRequest() {
    *this = ::std::move(from);
  }

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogoutRequest& operator=(UserLogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogoutRequest* internal_default_instance() {
    return reinterpret_cast<const UserLogoutRequest*>(
               &_UserLogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserLogoutRequest& a, UserLogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogoutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLogoutRequest& from) {
    UserLogoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogoutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserLogoutRequest";
  }
  protected:
  explicit UserLogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.UserLogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UserOnlineHeartBeatNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserOnlineHeartBeatNotification) */ {
 public:
  inline UserOnlineHeartBeatNotification() : UserOnlineHeartBeatNotification(nullptr) {}
  ~UserOnlineHeartBeatNotification() override;
  explicit PROTOBUF_CONSTEXPR UserOnlineHeartBeatNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOnlineHeartBeatNotification(const UserOnlineHeartBeatNotification& from);
  UserOnlineHeartBeatNotification(UserOnlineHeartBeatNotification&& from) noexcept
    : UserOnlineHeartBeatNotification() {
    *this = ::std::move(from);
  }

  inline UserOnlineHeartBeatNotification& operator=(const UserOnlineHeartBeatNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOnlineHeartBeatNotification& operator=(UserOnlineHeartBeatNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOnlineHeartBeatNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOnlineHeartBeatNotification* internal_default_instance() {
    return reinterpret_cast<const UserOnlineHeartBeatNotification*>(
               &_UserOnlineHeartBeatNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserOnlineHeartBeatNotification& a, UserOnlineHeartBeatNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOnlineHeartBeatNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOnlineHeartBeatNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOnlineHeartBeatNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOnlineHeartBeatNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserOnlineHeartBeatNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserOnlineHeartBeatNotification& from) {
    UserOnlineHeartBeatNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOnlineHeartBeatNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserOnlineHeartBeatNotification";
  }
  protected:
  explicit UserOnlineHeartBeatNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kHeartBeatTimeFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // int64 HeartBeatTime = 2;
  void clear_heartbeattime();
  int64_t heartbeattime() const;
  void set_heartbeattime(int64_t value);
  private:
  int64_t _internal_heartbeattime() const;
  void _internal_set_heartbeattime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UserOnlineHeartBeatNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    int64_t heartbeattime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetUserPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetUserPermissionGroupRequest) */ {
 public:
  inline GetUserPermissionGroupRequest() : GetUserPermissionGroupRequest(nullptr) {}
  ~GetUserPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserPermissionGroupRequest(const GetUserPermissionGroupRequest& from);
  GetUserPermissionGroupRequest(GetUserPermissionGroupRequest&& from) noexcept
    : GetUserPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetUserPermissionGroupRequest& operator=(const GetUserPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserPermissionGroupRequest& operator=(GetUserPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserPermissionGroupRequest*>(
               &_GetUserPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetUserPermissionGroupRequest& a, GetUserPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserPermissionGroupRequest& from) {
    GetUserPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetUserPermissionGroupRequest";
  }
  protected:
  explicit GetUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetUserPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetPermissionGroupRequest) */ {
 public:
  inline GetPermissionGroupRequest() : GetPermissionGroupRequest(nullptr) {}
  ~GetPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPermissionGroupRequest(const GetPermissionGroupRequest& from);
  GetPermissionGroupRequest(GetPermissionGroupRequest&& from) noexcept
    : GetPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetPermissionGroupRequest& operator=(const GetPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionGroupRequest& operator=(GetPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetPermissionGroupRequest*>(
               &_GetPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPermissionGroupRequest& a, GetPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPermissionGroupRequest& from) {
    GetPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetPermissionGroupRequest";
  }
  protected:
  explicit GetPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kPermissionGroupFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
  bool has_permissiongroup() const;
  private:
  bool _internal_has_permissiongroup() const;
  public:
  void clear_permissiongroup();
  const ::proto::PermissionGroupMetaInfoV1& permissiongroup() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupMetaInfoV1* release_permissiongroup();
  ::proto::PermissionGroupMetaInfoV1* mutable_permissiongroup();
  void set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup);
  private:
  const ::proto::PermissionGroupMetaInfoV1& _internal_permissiongroup() const;
  ::proto::PermissionGroupMetaInfoV1* _internal_mutable_permissiongroup();
  public:
  void unsafe_arena_set_allocated_permissiongroup(
      ::proto::PermissionGroupMetaInfoV1* permissiongroup);
  ::proto::PermissionGroupMetaInfoV1* unsafe_arena_release_permissiongroup();

  // @@protoc_insertion_point(class_scope:proto.GetPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::PermissionGroupMetaInfoV1* permissiongroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllPermissionGroupRequest) */ {
 public:
  inline GetAllPermissionGroupRequest() : GetAllPermissionGroupRequest(nullptr) {}
  ~GetAllPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllPermissionGroupRequest(const GetAllPermissionGroupRequest& from);
  GetAllPermissionGroupRequest(GetAllPermissionGroupRequest&& from) noexcept
    : GetAllPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetAllPermissionGroupRequest& operator=(const GetAllPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPermissionGroupRequest& operator=(GetAllPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllPermissionGroupRequest*>(
               &_GetAllPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAllPermissionGroupRequest& a, GetAllPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllPermissionGroupRequest& from) {
    GetAllPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllPermissionGroupRequest";
  }
  protected:
  explicit GetAllPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class ChangeUserPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ChangeUserPermissionGroupRequest) */ {
 public:
  inline ChangeUserPermissionGroupRequest() : ChangeUserPermissionGroupRequest(nullptr) {}
  ~ChangeUserPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR ChangeUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeUserPermissionGroupRequest(const ChangeUserPermissionGroupRequest& from);
  ChangeUserPermissionGroupRequest(ChangeUserPermissionGroupRequest&& from) noexcept
    : ChangeUserPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline ChangeUserPermissionGroupRequest& operator=(const ChangeUserPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeUserPermissionGroupRequest& operator=(ChangeUserPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeUserPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeUserPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeUserPermissionGroupRequest*>(
               &_ChangeUserPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChangeUserPermissionGroupRequest& a, ChangeUserPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeUserPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeUserPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeUserPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeUserPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeUserPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeUserPermissionGroupRequest& from) {
    ChangeUserPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeUserPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ChangeUserPermissionGroupRequest";
  }
  protected:
  explicit ChangeUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kPermissionGroupFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
  bool has_permissiongroup() const;
  private:
  bool _internal_has_permissiongroup() const;
  public:
  void clear_permissiongroup();
  const ::proto::PermissionGroupMetaInfoV1& permissiongroup() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupMetaInfoV1* release_permissiongroup();
  ::proto::PermissionGroupMetaInfoV1* mutable_permissiongroup();
  void set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup);
  private:
  const ::proto::PermissionGroupMetaInfoV1& _internal_permissiongroup() const;
  ::proto::PermissionGroupMetaInfoV1* _internal_mutable_permissiongroup();
  public:
  void unsafe_arena_set_allocated_permissiongroup(
      ::proto::PermissionGroupMetaInfoV1* permissiongroup);
  ::proto::PermissionGroupMetaInfoV1* unsafe_arena_release_permissiongroup();

  // @@protoc_insertion_point(class_scope:proto.ChangeUserPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::PermissionGroupMetaInfoV1* permissiongroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateProjectRequest) */ {
 public:
  inline CreateProjectRequest() : CreateProjectRequest(nullptr) {}
  ~CreateProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRequest(const CreateProjectRequest& from);
  CreateProjectRequest(CreateProjectRequest&& from) noexcept
    : CreateProjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRequest& operator=(const CreateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRequest& operator=(CreateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRequest*>(
               &_CreateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateProjectRequest& a, CreateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProjectRequest& from) {
    CreateProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateProjectRequest";
  }
  protected:
  explicit CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteProjectRequest) */ {
 public:
  inline DeleteProjectRequest() : DeleteProjectRequest(nullptr) {}
  ~DeleteProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRequest(const DeleteProjectRequest& from);
  DeleteProjectRequest(DeleteProjectRequest&& from) noexcept
    : DeleteProjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRequest& operator=(const DeleteProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRequest& operator=(DeleteProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRequest*>(
               &_DeleteProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteProjectRequest& a, DeleteProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteProjectRequest& from) {
    DeleteProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteProjectRequest";
  }
  protected:
  explicit DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateProjectRequest) */ {
 public:
  inline UpdateProjectRequest() : UpdateProjectRequest(nullptr) {}
  ~UpdateProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRequest(const UpdateProjectRequest& from);
  UpdateProjectRequest(UpdateProjectRequest&& from) noexcept
    : UpdateProjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRequest& operator=(const UpdateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRequest& operator=(UpdateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRequest*>(
               &_UpdateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateProjectRequest& a, UpdateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateProjectRequest& from) {
    UpdateProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateProjectRequest";
  }
  protected:
  explicit UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetProjectRequest) */ {
 public:
  inline GetProjectRequest() : GetProjectRequest(nullptr) {}
  ~GetProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR GetProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProjectRequest(const GetProjectRequest& from);
  GetProjectRequest(GetProjectRequest&& from) noexcept
    : GetProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectRequest& operator=(const GetProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectRequest& operator=(GetProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectRequest*>(
               &_GetProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetProjectRequest& a, GetProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetProjectRequest& from) {
    GetProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetProjectRequest";
  }
  protected:
  explicit GetProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.GetProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllProjectRequest) */ {
 public:
  inline GetAllProjectRequest() : GetAllProjectRequest(nullptr) {}
  ~GetAllProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllProjectRequest(const GetAllProjectRequest& from);
  GetAllProjectRequest(GetAllProjectRequest&& from) noexcept
    : GetAllProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetAllProjectRequest& operator=(const GetAllProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllProjectRequest& operator=(GetAllProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllProjectRequest*>(
               &_GetAllProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetAllProjectRequest& a, GetAllProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllProjectRequest& from) {
    GetAllProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllProjectRequest";
  }
  protected:
  explicit GetAllProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcRequest) */ {
 public:
  inline CreateSwcRequest() : CreateSwcRequest(nullptr) {}
  ~CreateSwcRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcRequest(const CreateSwcRequest& from);
  CreateSwcRequest(CreateSwcRequest&& from) noexcept
    : CreateSwcRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcRequest& operator=(const CreateSwcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcRequest& operator=(CreateSwcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcRequest*>(
               &_CreateSwcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateSwcRequest& a, CreateSwcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcRequest& from) {
    CreateSwcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcRequest";
  }
  protected:
  explicit CreateSwcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcRequest) */ {
 public:
  inline DeleteSwcRequest() : DeleteSwcRequest(nullptr) {}
  ~DeleteSwcRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcRequest(const DeleteSwcRequest& from);
  DeleteSwcRequest(DeleteSwcRequest&& from) noexcept
    : DeleteSwcRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSwcRequest& operator=(const DeleteSwcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcRequest& operator=(DeleteSwcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcRequest*>(
               &_DeleteSwcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteSwcRequest& a, DeleteSwcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcRequest& from) {
    DeleteSwcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcRequest";
  }
  protected:
  explicit DeleteSwcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcRequest) */ {
 public:
  inline UpdateSwcRequest() : UpdateSwcRequest(nullptr) {}
  ~UpdateSwcRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcRequest(const UpdateSwcRequest& from);
  UpdateSwcRequest(UpdateSwcRequest&& from) noexcept
    : UpdateSwcRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSwcRequest& operator=(const UpdateSwcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcRequest& operator=(UpdateSwcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcRequest*>(
               &_UpdateSwcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateSwcRequest& a, UpdateSwcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcRequest& from) {
    UpdateSwcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcRequest";
  }
  protected:
  explicit UpdateSwcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcMetaInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcMetaInfoRequest) */ {
 public:
  inline GetSwcMetaInfoRequest() : GetSwcMetaInfoRequest(nullptr) {}
  ~GetSwcMetaInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcMetaInfoRequest(const GetSwcMetaInfoRequest& from);
  GetSwcMetaInfoRequest(GetSwcMetaInfoRequest&& from) noexcept
    : GetSwcMetaInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcMetaInfoRequest& operator=(const GetSwcMetaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcMetaInfoRequest& operator=(GetSwcMetaInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcMetaInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcMetaInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcMetaInfoRequest*>(
               &_GetSwcMetaInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetSwcMetaInfoRequest& a, GetSwcMetaInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcMetaInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcMetaInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcMetaInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcMetaInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcMetaInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcMetaInfoRequest& from) {
    GetSwcMetaInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcMetaInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcMetaInfoRequest";
  }
  protected:
  explicit GetSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcMetaInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllSwcMetaInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllSwcMetaInfoRequest) */ {
 public:
  inline GetAllSwcMetaInfoRequest() : GetAllSwcMetaInfoRequest(nullptr) {}
  ~GetAllSwcMetaInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllSwcMetaInfoRequest(const GetAllSwcMetaInfoRequest& from);
  GetAllSwcMetaInfoRequest(GetAllSwcMetaInfoRequest&& from) noexcept
    : GetAllSwcMetaInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAllSwcMetaInfoRequest& operator=(const GetAllSwcMetaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllSwcMetaInfoRequest& operator=(GetAllSwcMetaInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllSwcMetaInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllSwcMetaInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllSwcMetaInfoRequest*>(
               &_GetAllSwcMetaInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAllSwcMetaInfoRequest& a, GetAllSwcMetaInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllSwcMetaInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllSwcMetaInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllSwcMetaInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllSwcMetaInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllSwcMetaInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllSwcMetaInfoRequest& from) {
    GetAllSwcMetaInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllSwcMetaInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllSwcMetaInfoRequest";
  }
  protected:
  explicit GetAllSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllSwcMetaInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcNodeDataRequest) */ {
 public:
  inline CreateSwcNodeDataRequest() : CreateSwcNodeDataRequest(nullptr) {}
  ~CreateSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcNodeDataRequest(const CreateSwcNodeDataRequest& from);
  CreateSwcNodeDataRequest(CreateSwcNodeDataRequest&& from) noexcept
    : CreateSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcNodeDataRequest& operator=(const CreateSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcNodeDataRequest& operator=(CreateSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcNodeDataRequest*>(
               &_CreateSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateSwcNodeDataRequest& a, CreateSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcNodeDataRequest& from) {
    CreateSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcNodeDataRequest";
  }
  protected:
  explicit CreateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
    kSwcNodeDataFieldNumber = 3,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // .proto.SwcDataV1 SwcNodeData = 3;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcNodeDataRequest) */ {
 public:
  inline DeleteSwcNodeDataRequest() : DeleteSwcNodeDataRequest(nullptr) {}
  ~DeleteSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcNodeDataRequest(const DeleteSwcNodeDataRequest& from);
  DeleteSwcNodeDataRequest(DeleteSwcNodeDataRequest&& from) noexcept
    : DeleteSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSwcNodeDataRequest& operator=(const DeleteSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcNodeDataRequest& operator=(DeleteSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcNodeDataRequest*>(
               &_DeleteSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeleteSwcNodeDataRequest& a, DeleteSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcNodeDataRequest& from) {
    DeleteSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcNodeDataRequest";
  }
  protected:
  explicit DeleteSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
    kSwcNodeDataFieldNumber = 3,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // .proto.SwcDataV1 SwcNodeData = 3;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcNodeDataRequest) */ {
 public:
  inline UpdateSwcNodeDataRequest() : UpdateSwcNodeDataRequest(nullptr) {}
  ~UpdateSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcNodeDataRequest(const UpdateSwcNodeDataRequest& from);
  UpdateSwcNodeDataRequest(UpdateSwcNodeDataRequest&& from) noexcept
    : UpdateSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSwcNodeDataRequest& operator=(const UpdateSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcNodeDataRequest& operator=(UpdateSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcNodeDataRequest*>(
               &_UpdateSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateSwcNodeDataRequest& a, UpdateSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcNodeDataRequest& from) {
    UpdateSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcNodeDataRequest";
  }
  protected:
  explicit UpdateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
    kSwcNodeDataFieldNumber = 3,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // .proto.SwcNodeDataV1 SwcNodeData = 3;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcNodeDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcNodeDataV1* release_swcnodedata();
  ::proto::SwcNodeDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcNodeDataV1* swcnodedata);
  private:
  const ::proto::SwcNodeDataV1& _internal_swcnodedata() const;
  ::proto::SwcNodeDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcNodeDataV1* swcnodedata);
  ::proto::SwcNodeDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    ::proto::SwcNodeDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcNodeDataRequest) */ {
 public:
  inline GetSwcNodeDataRequest() : GetSwcNodeDataRequest(nullptr) {}
  ~GetSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcNodeDataRequest(const GetSwcNodeDataRequest& from);
  GetSwcNodeDataRequest(GetSwcNodeDataRequest&& from) noexcept
    : GetSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcNodeDataRequest& operator=(const GetSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcNodeDataRequest& operator=(GetSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcNodeDataRequest*>(
               &_GetSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetSwcNodeDataRequest& a, GetSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcNodeDataRequest& from) {
    GetSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcNodeDataRequest";
  }
  protected:
  explicit GetSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
    kSwcNodeDataFieldNumber = 3,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // .proto.SwcDataV1 SwcNodeData = 3;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.GetSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcFullNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcFullNodeDataRequest) */ {
 public:
  inline GetSwcFullNodeDataRequest() : GetSwcFullNodeDataRequest(nullptr) {}
  ~GetSwcFullNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcFullNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcFullNodeDataRequest(const GetSwcFullNodeDataRequest& from);
  GetSwcFullNodeDataRequest(GetSwcFullNodeDataRequest&& from) noexcept
    : GetSwcFullNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcFullNodeDataRequest& operator=(const GetSwcFullNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcFullNodeDataRequest& operator=(GetSwcFullNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcFullNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcFullNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcFullNodeDataRequest*>(
               &_GetSwcFullNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetSwcFullNodeDataRequest& a, GetSwcFullNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcFullNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcFullNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcFullNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcFullNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcFullNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcFullNodeDataRequest& from) {
    GetSwcFullNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcFullNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcFullNodeDataRequest";
  }
  protected:
  explicit GetSwcFullNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcFullNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcNodeDataListByTimeAndUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcNodeDataListByTimeAndUserRequest) */ {
 public:
  inline GetSwcNodeDataListByTimeAndUserRequest() : GetSwcNodeDataListByTimeAndUserRequest(nullptr) {}
  ~GetSwcNodeDataListByTimeAndUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcNodeDataListByTimeAndUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcNodeDataListByTimeAndUserRequest(const GetSwcNodeDataListByTimeAndUserRequest& from);
  GetSwcNodeDataListByTimeAndUserRequest(GetSwcNodeDataListByTimeAndUserRequest&& from) noexcept
    : GetSwcNodeDataListByTimeAndUserRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcNodeDataListByTimeAndUserRequest& operator=(const GetSwcNodeDataListByTimeAndUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcNodeDataListByTimeAndUserRequest& operator=(GetSwcNodeDataListByTimeAndUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcNodeDataListByTimeAndUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcNodeDataListByTimeAndUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcNodeDataListByTimeAndUserRequest*>(
               &_GetSwcNodeDataListByTimeAndUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetSwcNodeDataListByTimeAndUserRequest& a, GetSwcNodeDataListByTimeAndUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcNodeDataListByTimeAndUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcNodeDataListByTimeAndUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcNodeDataListByTimeAndUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcNodeDataListByTimeAndUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcNodeDataListByTimeAndUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcNodeDataListByTimeAndUserRequest& from) {
    GetSwcNodeDataListByTimeAndUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcNodeDataListByTimeAndUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcNodeDataListByTimeAndUserRequest";
  }
  protected:
  explicit GetSwcNodeDataListByTimeAndUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserUuidFieldNumber = 4,
    kUserInfoFieldNumber = 1,
    kSwcNodeDataFieldNumber = 2,
    kCreateTimeFieldNumber = 3,
  };
  // string UserUuid = 4;
  void clear_useruuid();
  const std::string& useruuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_useruuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_useruuid();
  PROTOBUF_NODISCARD std::string* release_useruuid();
  void set_allocated_useruuid(std::string* useruuid);
  private:
  const std::string& _internal_useruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_useruuid(const std::string& value);
  std::string* _internal_mutable_useruuid();
  public:

  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.SwcMetaInfoV1 SwcNodeData = 2;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcMetaInfoV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcnodedata();
  ::proto::SwcMetaInfoV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcMetaInfoV1* swcnodedata);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcnodedata() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcMetaInfoV1* swcnodedata);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcnodedata();

  // .google.protobuf.Timestamp CreateTime = 3;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // @@protoc_insertion_point(class_scope:proto.GetSwcNodeDataListByTimeAndUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useruuid_;
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::SwcMetaInfoV1* swcnodedata_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class BackupFullDatabaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BackupFullDatabaseRequest) */ {
 public:
  inline BackupFullDatabaseRequest() : BackupFullDatabaseRequest(nullptr) {}
  ~BackupFullDatabaseRequest() override;
  explicit PROTOBUF_CONSTEXPR BackupFullDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackupFullDatabaseRequest(const BackupFullDatabaseRequest& from);
  BackupFullDatabaseRequest(BackupFullDatabaseRequest&& from) noexcept
    : BackupFullDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline BackupFullDatabaseRequest& operator=(const BackupFullDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupFullDatabaseRequest& operator=(BackupFullDatabaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupFullDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupFullDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const BackupFullDatabaseRequest*>(
               &_BackupFullDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BackupFullDatabaseRequest& a, BackupFullDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupFullDatabaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupFullDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupFullDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackupFullDatabaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BackupFullDatabaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BackupFullDatabaseRequest& from) {
    BackupFullDatabaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupFullDatabaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BackupFullDatabaseRequest";
  }
  protected:
  explicit BackupFullDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kDelayBackupTimeFieldNumber = 3,
    kInstantBackupFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .google.protobuf.Timestamp DelayBackupTime = 3;
  bool has_delaybackuptime() const;
  private:
  bool _internal_has_delaybackuptime() const;
  public:
  void clear_delaybackuptime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delaybackuptime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delaybackuptime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delaybackuptime();
  void set_allocated_delaybackuptime(::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delaybackuptime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delaybackuptime();
  public:
  void unsafe_arena_set_allocated_delaybackuptime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delaybackuptime();

  // bool InstantBackup = 2;
  void clear_instantbackup();
  bool instantbackup() const;
  void set_instantbackup(bool value);
  private:
  bool _internal_instantbackup() const;
  void _internal_set_instantbackup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BackupFullDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime_;
    bool instantbackup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateDailyStatisticsRequest) */ {
 public:
  inline CreateDailyStatisticsRequest() : CreateDailyStatisticsRequest(nullptr) {}
  ~CreateDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDailyStatisticsRequest(const CreateDailyStatisticsRequest& from);
  CreateDailyStatisticsRequest(CreateDailyStatisticsRequest&& from) noexcept
    : CreateDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline CreateDailyStatisticsRequest& operator=(const CreateDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDailyStatisticsRequest& operator=(CreateDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDailyStatisticsRequest*>(
               &_CreateDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CreateDailyStatisticsRequest& a, CreateDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDailyStatisticsRequest& from) {
    CreateDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateDailyStatisticsRequest";
  }
  protected:
  explicit CreateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteDailyStatisticsRequest) */ {
 public:
  inline DeleteDailyStatisticsRequest() : DeleteDailyStatisticsRequest(nullptr) {}
  ~DeleteDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDailyStatisticsRequest(const DeleteDailyStatisticsRequest& from);
  DeleteDailyStatisticsRequest(DeleteDailyStatisticsRequest&& from) noexcept
    : DeleteDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDailyStatisticsRequest& operator=(const DeleteDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDailyStatisticsRequest& operator=(DeleteDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDailyStatisticsRequest*>(
               &_DeleteDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DeleteDailyStatisticsRequest& a, DeleteDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDailyStatisticsRequest& from) {
    DeleteDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteDailyStatisticsRequest";
  }
  protected:
  explicit DeleteDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateDailyStatisticsRequest) */ {
 public:
  inline UpdateDailyStatisticsRequest() : UpdateDailyStatisticsRequest(nullptr) {}
  ~UpdateDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDailyStatisticsRequest(const UpdateDailyStatisticsRequest& from);
  UpdateDailyStatisticsRequest(UpdateDailyStatisticsRequest&& from) noexcept
    : UpdateDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDailyStatisticsRequest& operator=(const UpdateDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDailyStatisticsRequest& operator=(UpdateDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDailyStatisticsRequest*>(
               &_UpdateDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateDailyStatisticsRequest& a, UpdateDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDailyStatisticsRequest& from) {
    UpdateDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateDailyStatisticsRequest";
  }
  protected:
  explicit UpdateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetDailyStatisticsRequest) */ {
 public:
  inline GetDailyStatisticsRequest() : GetDailyStatisticsRequest(nullptr) {}
  ~GetDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDailyStatisticsRequest(const GetDailyStatisticsRequest& from);
  GetDailyStatisticsRequest(GetDailyStatisticsRequest&& from) noexcept
    : GetDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetDailyStatisticsRequest& operator=(const GetDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDailyStatisticsRequest& operator=(GetDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDailyStatisticsRequest*>(
               &_GetDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetDailyStatisticsRequest& a, GetDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDailyStatisticsRequest& from) {
    GetDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetDailyStatisticsRequest";
  }
  protected:
  explicit GetDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.GetDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllDailyStatisticsRequest) */ {
 public:
  inline GetAllDailyStatisticsRequest() : GetAllDailyStatisticsRequest(nullptr) {}
  ~GetAllDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllDailyStatisticsRequest(const GetAllDailyStatisticsRequest& from);
  GetAllDailyStatisticsRequest(GetAllDailyStatisticsRequest&& from) noexcept
    : GetAllDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetAllDailyStatisticsRequest& operator=(const GetAllDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllDailyStatisticsRequest& operator=(GetAllDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllDailyStatisticsRequest*>(
               &_GetAllDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetAllDailyStatisticsRequest& a, GetAllDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllDailyStatisticsRequest& from) {
    GetAllDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllDailyStatisticsRequest";
  }
  protected:
  explicit GetAllDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .proto.UserMetaInfoV1 UserInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUserRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool CreateUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void CreateUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateUserRequest.UserInfo)
  return _msg;
}
inline void CreateUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool DeleteUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool DeleteUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& DeleteUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& DeleteUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void DeleteUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* DeleteUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* DeleteUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteUserRequest.UserInfo)
  return _msg;
}
inline void DeleteUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UpdateUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateUserRequest.UserInfo)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// GetUserRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserRequest.UserInfo)
  return _msg;
}
inline void GetUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// GetAllUserRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetAllUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetAllUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetAllUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetAllUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetAllUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetAllUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetAllUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllUserRequest.UserInfo)
  return _msg;
}
inline void GetAllUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// UserLoginRequest

// string UserName = 1;
inline void UserLoginRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginRequest.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserLoginRequest.UserName)
}
inline std::string* UserLoginRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginRequest.UserName)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserLoginRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:proto.UserLoginRequest.UserName)
  return _impl_.username_.Release();
}
inline void UserLoginRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginRequest.UserName)
}

// string Password = 2;
inline void UserLoginRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginRequest.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserLoginRequest.Password)
}
inline std::string* UserLoginRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginRequest.Password)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserLoginRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:proto.UserLoginRequest.Password)
  return _impl_.password_.Release();
}
inline void UserLoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginRequest.Password)
}

// -------------------------------------------------------------------

// UserLogoutRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UserLogoutRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UserLogoutRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UserLogoutRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UserLogoutRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLogoutRequest.UserInfo)
  return _internal_userinfo();
}
inline void UserLogoutRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLogoutRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UserLogoutRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UserLogoutRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UserLogoutRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UserLogoutRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UserLogoutRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLogoutRequest.UserInfo)
  return _msg;
}
inline void UserLogoutRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLogoutRequest.UserInfo)
}

// -------------------------------------------------------------------

// UserOnlineHeartBeatNotification

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UserOnlineHeartBeatNotification::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UserOnlineHeartBeatNotification::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UserOnlineHeartBeatNotification::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UserOnlineHeartBeatNotification::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatNotification.UserInfo)
  return _internal_userinfo();
}
inline void UserOnlineHeartBeatNotification::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserOnlineHeartBeatNotification.UserInfo)
}
inline ::proto::UserMetaInfoV1* UserOnlineHeartBeatNotification::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UserOnlineHeartBeatNotification::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UserOnlineHeartBeatNotification.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UserOnlineHeartBeatNotification::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UserOnlineHeartBeatNotification::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserOnlineHeartBeatNotification.UserInfo)
  return _msg;
}
inline void UserOnlineHeartBeatNotification::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserOnlineHeartBeatNotification.UserInfo)
}

// int64 HeartBeatTime = 2;
inline void UserOnlineHeartBeatNotification::clear_heartbeattime() {
  _impl_.heartbeattime_ = int64_t{0};
}
inline int64_t UserOnlineHeartBeatNotification::_internal_heartbeattime() const {
  return _impl_.heartbeattime_;
}
inline int64_t UserOnlineHeartBeatNotification::heartbeattime() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatNotification.HeartBeatTime)
  return _internal_heartbeattime();
}
inline void UserOnlineHeartBeatNotification::_internal_set_heartbeattime(int64_t value) {
  
  _impl_.heartbeattime_ = value;
}
inline void UserOnlineHeartBeatNotification::set_heartbeattime(int64_t value) {
  _internal_set_heartbeattime(value);
  // @@protoc_insertion_point(field_set:proto.UserOnlineHeartBeatNotification.HeartBeatTime)
}

// -------------------------------------------------------------------

// GetUserPermissionGroupRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetUserPermissionGroupRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetUserPermissionGroupRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetUserPermissionGroupRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetUserPermissionGroupRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserPermissionGroupRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetUserPermissionGroupRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserPermissionGroupRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetUserPermissionGroupRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetUserPermissionGroupRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserPermissionGroupRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetUserPermissionGroupRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetUserPermissionGroupRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserPermissionGroupRequest.UserInfo)
  return _msg;
}
inline void GetUserPermissionGroupRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserPermissionGroupRequest.UserInfo)
}

// -------------------------------------------------------------------

// GetPermissionGroupRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetPermissionGroupRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetPermissionGroupRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetPermissionGroupRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetPermissionGroupRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetPermissionGroupRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetPermissionGroupRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetPermissionGroupRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetPermissionGroupRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetPermissionGroupRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupRequest.UserInfo)
  return _msg;
}
inline void GetPermissionGroupRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupRequest.UserInfo)
}

// .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
inline bool GetPermissionGroupRequest::_internal_has_permissiongroup() const {
  return this != internal_default_instance() && _impl_.permissiongroup_ != nullptr;
}
inline bool GetPermissionGroupRequest::has_permissiongroup() const {
  return _internal_has_permissiongroup();
}
inline const ::proto::PermissionGroupMetaInfoV1& GetPermissionGroupRequest::_internal_permissiongroup() const {
  const ::proto::PermissionGroupMetaInfoV1* p = _impl_.permissiongroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupMetaInfoV1&>(
      ::proto::_PermissionGroupMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionGroupMetaInfoV1& GetPermissionGroupRequest::permissiongroup() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupRequest.PermissionGroup)
  return _internal_permissiongroup();
}
inline void GetPermissionGroupRequest::unsafe_arena_set_allocated_permissiongroup(
    ::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  _impl_.permissiongroup_ = permissiongroup;
  if (permissiongroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupRequest.PermissionGroup)
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::release_permissiongroup() {
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::unsafe_arena_release_permissiongroup() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupRequest.PermissionGroup)
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::_internal_mutable_permissiongroup() {
  
  if (_impl_.permissiongroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(GetArenaForAllocation());
    _impl_.permissiongroup_ = p;
  }
  return _impl_.permissiongroup_;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::mutable_permissiongroup() {
  ::proto::PermissionGroupMetaInfoV1* _msg = _internal_mutable_permissiongroup();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupRequest.PermissionGroup)
  return _msg;
}
inline void GetPermissionGroupRequest::set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  if (permissiongroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permissiongroup));
    if (message_arena != submessage_arena) {
      permissiongroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permissiongroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permissiongroup_ = permissiongroup;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupRequest.PermissionGroup)
}

// -------------------------------------------------------------------

// GetAllPermissionGroupRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetAllPermissionGroupRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetAllPermissionGroupRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetAllPermissionGroupRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetAllPermissionGroupRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllPermissionGroupRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetAllPermissionGroupRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllPermissionGroupRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetAllPermissionGroupRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllPermissionGroupRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllPermissionGroupRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllPermissionGroupRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetAllPermissionGroupRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllPermissionGroupRequest.UserInfo)
  return _msg;
}
inline void GetAllPermissionGroupRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllPermissionGroupRequest.UserInfo)
}

// -------------------------------------------------------------------

// ChangeUserPermissionGroupRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool ChangeUserPermissionGroupRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool ChangeUserPermissionGroupRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& ChangeUserPermissionGroupRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& ChangeUserPermissionGroupRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupRequest.UserInfo)
  return _internal_userinfo();
}
inline void ChangeUserPermissionGroupRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ChangeUserPermissionGroupRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* ChangeUserPermissionGroupRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* ChangeUserPermissionGroupRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* ChangeUserPermissionGroupRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* ChangeUserPermissionGroupRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupRequest.UserInfo)
  return _msg;
}
inline void ChangeUserPermissionGroupRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupRequest.UserInfo)
}

// .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
inline bool ChangeUserPermissionGroupRequest::_internal_has_permissiongroup() const {
  return this != internal_default_instance() && _impl_.permissiongroup_ != nullptr;
}
inline bool ChangeUserPermissionGroupRequest::has_permissiongroup() const {
  return _internal_has_permissiongroup();
}
inline const ::proto::PermissionGroupMetaInfoV1& ChangeUserPermissionGroupRequest::_internal_permissiongroup() const {
  const ::proto::PermissionGroupMetaInfoV1* p = _impl_.permissiongroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupMetaInfoV1&>(
      ::proto::_PermissionGroupMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionGroupMetaInfoV1& ChangeUserPermissionGroupRequest::permissiongroup() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupRequest.PermissionGroup)
  return _internal_permissiongroup();
}
inline void ChangeUserPermissionGroupRequest::unsafe_arena_set_allocated_permissiongroup(
    ::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  _impl_.permissiongroup_ = permissiongroup;
  if (permissiongroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ChangeUserPermissionGroupRequest.PermissionGroup)
}
inline ::proto::PermissionGroupMetaInfoV1* ChangeUserPermissionGroupRequest::release_permissiongroup() {
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* ChangeUserPermissionGroupRequest::unsafe_arena_release_permissiongroup() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupRequest.PermissionGroup)
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* ChangeUserPermissionGroupRequest::_internal_mutable_permissiongroup() {
  
  if (_impl_.permissiongroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(GetArenaForAllocation());
    _impl_.permissiongroup_ = p;
  }
  return _impl_.permissiongroup_;
}
inline ::proto::PermissionGroupMetaInfoV1* ChangeUserPermissionGroupRequest::mutable_permissiongroup() {
  ::proto::PermissionGroupMetaInfoV1* _msg = _internal_mutable_permissiongroup();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupRequest.PermissionGroup)
  return _msg;
}
inline void ChangeUserPermissionGroupRequest::set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  if (permissiongroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permissiongroup));
    if (message_arena != submessage_arena) {
      permissiongroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permissiongroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permissiongroup_ = permissiongroup;
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupRequest.PermissionGroup)
}

// -------------------------------------------------------------------

// CreateProjectRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool CreateProjectRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateProjectRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateProjectRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateProjectRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectRequest.UserInfo)
  return _internal_userinfo();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateProjectRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateProjectRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateProjectRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateProjectRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectRequest.UserInfo)
  return _msg;
}
inline void CreateProjectRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectRequest.UserInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool CreateProjectRequest::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool CreateProjectRequest::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& CreateProjectRequest::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& CreateProjectRequest::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectRequest.ProjectInfo)
  return _internal_projectinfo();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectRequest.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectRequest.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectRequest.ProjectInfo)
  return _msg;
}
inline void CreateProjectRequest::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectRequest.ProjectInfo)
}

// -------------------------------------------------------------------

// DeleteProjectRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool DeleteProjectRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool DeleteProjectRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& DeleteProjectRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& DeleteProjectRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectRequest.UserInfo)
  return _internal_userinfo();
}
inline void DeleteProjectRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteProjectRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* DeleteProjectRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteProjectRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteProjectRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* DeleteProjectRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectRequest.UserInfo)
  return _msg;
}
inline void DeleteProjectRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectRequest.UserInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool DeleteProjectRequest::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool DeleteProjectRequest::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& DeleteProjectRequest::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& DeleteProjectRequest::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectRequest.ProjectInfo)
  return _internal_projectinfo();
}
inline void DeleteProjectRequest::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteProjectRequest.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectRequest::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectRequest::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectRequest.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectRequest::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectRequest::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectRequest.ProjectInfo)
  return _msg;
}
inline void DeleteProjectRequest::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectRequest.ProjectInfo)
}

// -------------------------------------------------------------------

// UpdateProjectRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UpdateProjectRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateProjectRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateProjectRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateProjectRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectRequest.UserInfo)
  return _internal_userinfo();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateProjectRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateProjectRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateProjectRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateProjectRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectRequest.UserInfo)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectRequest.UserInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool UpdateProjectRequest::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool UpdateProjectRequest::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& UpdateProjectRequest::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& UpdateProjectRequest::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectRequest.ProjectInfo)
  return _internal_projectinfo();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectRequest.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectRequest.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectRequest.ProjectInfo)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectRequest.ProjectInfo)
}

// -------------------------------------------------------------------

// GetProjectRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetProjectRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetProjectRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetProjectRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetProjectRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetProjectRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetProjectRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetProjectRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetProjectRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetProjectRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetProjectRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetProjectRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectRequest.UserInfo)
  return _msg;
}
inline void GetProjectRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectRequest.UserInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool GetProjectRequest::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool GetProjectRequest::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& GetProjectRequest::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& GetProjectRequest::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectRequest.ProjectInfo)
  return _internal_projectinfo();
}
inline void GetProjectRequest::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetProjectRequest.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* GetProjectRequest::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* GetProjectRequest::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.GetProjectRequest.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* GetProjectRequest::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* GetProjectRequest::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectRequest.ProjectInfo)
  return _msg;
}
inline void GetProjectRequest::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectRequest.ProjectInfo)
}

// -------------------------------------------------------------------

// GetAllProjectRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetAllProjectRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetAllProjectRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetAllProjectRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetAllProjectRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllProjectRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetAllProjectRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllProjectRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetAllProjectRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllProjectRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllProjectRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllProjectRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetAllProjectRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllProjectRequest.UserInfo)
  return _msg;
}
inline void GetAllProjectRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllProjectRequest.UserInfo)
}

// -------------------------------------------------------------------

// CreateSwcRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool CreateSwcRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateSwcRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateSwcRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateSwcRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcRequest.UserInfo)
  return _internal_userinfo();
}
inline void CreateSwcRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateSwcRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateSwcRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateSwcRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateSwcRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcRequest.UserInfo)
  return _msg;
}
inline void CreateSwcRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool CreateSwcRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool CreateSwcRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& CreateSwcRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& CreateSwcRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void CreateSwcRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcRequest.SwcInfo)
  return _msg;
}
inline void CreateSwcRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcRequest.SwcInfo)
}

// -------------------------------------------------------------------

// DeleteSwcRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool DeleteSwcRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool DeleteSwcRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& DeleteSwcRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& DeleteSwcRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcRequest.UserInfo)
  return _internal_userinfo();
}
inline void DeleteSwcRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* DeleteSwcRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteSwcRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteSwcRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* DeleteSwcRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcRequest.UserInfo)
  return _msg;
}
inline void DeleteSwcRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool DeleteSwcRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool DeleteSwcRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& DeleteSwcRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& DeleteSwcRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void DeleteSwcRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* DeleteSwcRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcRequest.SwcInfo)
  return _msg;
}
inline void DeleteSwcRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcRequest.SwcInfo)
}

// -------------------------------------------------------------------

// UpdateSwcRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UpdateSwcRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateSwcRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateSwcRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateSwcRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcRequest.UserInfo)
  return _internal_userinfo();
}
inline void UpdateSwcRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateSwcRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateSwcRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateSwcRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateSwcRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcRequest.UserInfo)
  return _msg;
}
inline void UpdateSwcRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool UpdateSwcRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool UpdateSwcRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void UpdateSwcRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcRequest.SwcInfo)
  return _msg;
}
inline void UpdateSwcRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcRequest.SwcInfo)
}

// -------------------------------------------------------------------

// GetSwcMetaInfoRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetSwcMetaInfoRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetSwcMetaInfoRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetSwcMetaInfoRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetSwcMetaInfoRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetSwcMetaInfoRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcMetaInfoRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetSwcMetaInfoRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcMetaInfoRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcMetaInfoRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetSwcMetaInfoRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoRequest.UserInfo)
  return _msg;
}
inline void GetSwcMetaInfoRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool GetSwcMetaInfoRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool GetSwcMetaInfoRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& GetSwcMetaInfoRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& GetSwcMetaInfoRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void GetSwcMetaInfoRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcMetaInfoRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoRequest.SwcInfo)
  return _msg;
}
inline void GetSwcMetaInfoRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoRequest.SwcInfo)
}

// -------------------------------------------------------------------

// GetAllSwcMetaInfoRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetAllSwcMetaInfoRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetAllSwcMetaInfoRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetAllSwcMetaInfoRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetAllSwcMetaInfoRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSwcMetaInfoRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetAllSwcMetaInfoRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSwcMetaInfoRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetAllSwcMetaInfoRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllSwcMetaInfoRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSwcMetaInfoRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllSwcMetaInfoRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetAllSwcMetaInfoRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSwcMetaInfoRequest.UserInfo)
  return _msg;
}
inline void GetAllSwcMetaInfoRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSwcMetaInfoRequest.UserInfo)
}

// -------------------------------------------------------------------

// CreateSwcNodeDataRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool CreateSwcNodeDataRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateSwcNodeDataRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateSwcNodeDataRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateSwcNodeDataRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.UserInfo)
  return _internal_userinfo();
}
inline void CreateSwcNodeDataRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateSwcNodeDataRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateSwcNodeDataRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateSwcNodeDataRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateSwcNodeDataRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.UserInfo)
  return _msg;
}
inline void CreateSwcNodeDataRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool CreateSwcNodeDataRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool CreateSwcNodeDataRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& CreateSwcNodeDataRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& CreateSwcNodeDataRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void CreateSwcNodeDataRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* CreateSwcNodeDataRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcNodeDataRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcNodeDataRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* CreateSwcNodeDataRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.SwcInfo)
  return _msg;
}
inline void CreateSwcNodeDataRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.SwcInfo)
}

// .proto.SwcDataV1 SwcNodeData = 3;
inline bool CreateSwcNodeDataRequest::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool CreateSwcNodeDataRequest::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& CreateSwcNodeDataRequest::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& CreateSwcNodeDataRequest::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.SwcNodeData)
  return _internal_swcnodedata();
}
inline void CreateSwcNodeDataRequest::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataRequest.SwcNodeData)
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.SwcNodeData)
  return _msg;
}
inline void CreateSwcNodeDataRequest::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.SwcNodeData)
}

// -------------------------------------------------------------------

// DeleteSwcNodeDataRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool DeleteSwcNodeDataRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool DeleteSwcNodeDataRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& DeleteSwcNodeDataRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& DeleteSwcNodeDataRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.UserInfo)
  return _internal_userinfo();
}
inline void DeleteSwcNodeDataRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* DeleteSwcNodeDataRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteSwcNodeDataRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteSwcNodeDataRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* DeleteSwcNodeDataRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.UserInfo)
  return _msg;
}
inline void DeleteSwcNodeDataRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool DeleteSwcNodeDataRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool DeleteSwcNodeDataRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& DeleteSwcNodeDataRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& DeleteSwcNodeDataRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void DeleteSwcNodeDataRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* DeleteSwcNodeDataRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcNodeDataRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcNodeDataRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcNodeDataRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.SwcInfo)
  return _msg;
}
inline void DeleteSwcNodeDataRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.SwcInfo)
}

// .proto.SwcDataV1 SwcNodeData = 3;
inline bool DeleteSwcNodeDataRequest::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool DeleteSwcNodeDataRequest::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& DeleteSwcNodeDataRequest::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& DeleteSwcNodeDataRequest::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.SwcNodeData)
  return _internal_swcnodedata();
}
inline void DeleteSwcNodeDataRequest::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataRequest.SwcNodeData)
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.SwcNodeData)
  return _msg;
}
inline void DeleteSwcNodeDataRequest::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.SwcNodeData)
}

// -------------------------------------------------------------------

// UpdateSwcNodeDataRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UpdateSwcNodeDataRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateSwcNodeDataRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateSwcNodeDataRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateSwcNodeDataRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.UserInfo)
  return _internal_userinfo();
}
inline void UpdateSwcNodeDataRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateSwcNodeDataRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateSwcNodeDataRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateSwcNodeDataRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateSwcNodeDataRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.UserInfo)
  return _msg;
}
inline void UpdateSwcNodeDataRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool UpdateSwcNodeDataRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool UpdateSwcNodeDataRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcNodeDataRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcNodeDataRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void UpdateSwcNodeDataRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* UpdateSwcNodeDataRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcNodeDataRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcNodeDataRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcNodeDataRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.SwcInfo)
  return _msg;
}
inline void UpdateSwcNodeDataRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.SwcInfo)
}

// .proto.SwcNodeDataV1 SwcNodeData = 3;
inline bool UpdateSwcNodeDataRequest::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool UpdateSwcNodeDataRequest::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcNodeDataV1& UpdateSwcNodeDataRequest::_internal_swcnodedata() const {
  const ::proto::SwcNodeDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcNodeDataV1&>(
      ::proto::_SwcNodeDataV1_default_instance_);
}
inline const ::proto::SwcNodeDataV1& UpdateSwcNodeDataRequest::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.SwcNodeData)
  return _internal_swcnodedata();
}
inline void UpdateSwcNodeDataRequest::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcNodeDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataRequest.SwcNodeData)
}
inline ::proto::SwcNodeDataV1* UpdateSwcNodeDataRequest::release_swcnodedata() {
  
  ::proto::SwcNodeDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcNodeDataV1* UpdateSwcNodeDataRequest::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.SwcNodeData)
  
  ::proto::SwcNodeDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcNodeDataV1* UpdateSwcNodeDataRequest::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcNodeDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcNodeDataV1* UpdateSwcNodeDataRequest::mutable_swcnodedata() {
  ::proto::SwcNodeDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.SwcNodeData)
  return _msg;
}
inline void UpdateSwcNodeDataRequest::set_allocated_swcnodedata(::proto::SwcNodeDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.SwcNodeData)
}

// -------------------------------------------------------------------

// GetSwcNodeDataRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetSwcNodeDataRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetSwcNodeDataRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetSwcNodeDataRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetSwcNodeDataRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetSwcNodeDataRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.UserInfo)
  return _msg;
}
inline void GetSwcNodeDataRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool GetSwcNodeDataRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool GetSwcNodeDataRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& GetSwcNodeDataRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& GetSwcNodeDataRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void GetSwcNodeDataRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.SwcInfo)
  return _msg;
}
inline void GetSwcNodeDataRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.SwcInfo)
}

// .proto.SwcDataV1 SwcNodeData = 3;
inline bool GetSwcNodeDataRequest::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSwcNodeDataRequest::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& GetSwcNodeDataRequest::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& GetSwcNodeDataRequest::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSwcNodeDataRequest::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataRequest.SwcNodeData)
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.SwcNodeData)
  return _msg;
}
inline void GetSwcNodeDataRequest::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.SwcNodeData)
}

// -------------------------------------------------------------------

// GetSwcFullNodeDataRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetSwcFullNodeDataRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetSwcFullNodeDataRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetSwcFullNodeDataRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetSwcFullNodeDataRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetSwcFullNodeDataRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcFullNodeDataRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetSwcFullNodeDataRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcFullNodeDataRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcFullNodeDataRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetSwcFullNodeDataRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataRequest.UserInfo)
  return _msg;
}
inline void GetSwcFullNodeDataRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool GetSwcFullNodeDataRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool GetSwcFullNodeDataRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& GetSwcFullNodeDataRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& GetSwcFullNodeDataRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void GetSwcFullNodeDataRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcFullNodeDataRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* GetSwcFullNodeDataRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcFullNodeDataRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcFullNodeDataRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* GetSwcFullNodeDataRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataRequest.SwcInfo)
  return _msg;
}
inline void GetSwcFullNodeDataRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataRequest.SwcInfo)
}

// -------------------------------------------------------------------

// GetSwcNodeDataListByTimeAndUserRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetSwcNodeDataListByTimeAndUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetSwcNodeDataListByTimeAndUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.UserInfo)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.UserInfo)
}

// .proto.SwcMetaInfoV1 SwcNodeData = 2;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcMetaInfoV1& GetSwcNodeDataListByTimeAndUserRequest::_internal_swcnodedata() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& GetSwcNodeDataListByTimeAndUserRequest::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcMetaInfoV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcNodeData)
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::release_swcnodedata() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcNodeData)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::mutable_swcnodedata() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcNodeData)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_swcnodedata(::proto::SwcMetaInfoV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcNodeData)
}

// .google.protobuf.Timestamp CreateTime = 3;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSwcNodeDataListByTimeAndUserRequest::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSwcNodeDataListByTimeAndUserRequest::createtime() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.CreateTime)
  return _internal_createtime();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.CreateTime)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.CreateTime)
}

// string UserUuid = 4;
inline void GetSwcNodeDataListByTimeAndUserRequest::clear_useruuid() {
  _impl_.useruuid_.ClearToEmpty();
}
inline const std::string& GetSwcNodeDataListByTimeAndUserRequest::useruuid() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.UserUuid)
  return _internal_useruuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcNodeDataListByTimeAndUserRequest::set_useruuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.useruuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcNodeDataListByTimeAndUserRequest.UserUuid)
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::mutable_useruuid() {
  std::string* _s = _internal_mutable_useruuid();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.UserUuid)
  return _s;
}
inline const std::string& GetSwcNodeDataListByTimeAndUserRequest::_internal_useruuid() const {
  return _impl_.useruuid_.Get();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::_internal_set_useruuid(const std::string& value) {
  
  _impl_.useruuid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_useruuid() {
  
  return _impl_.useruuid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::release_useruuid() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.UserUuid)
  return _impl_.useruuid_.Release();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_useruuid(std::string* useruuid) {
  if (useruuid != nullptr) {
    
  } else {
    
  }
  _impl_.useruuid_.SetAllocated(useruuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.useruuid_.IsDefault()) {
    _impl_.useruuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.UserUuid)
}

// -------------------------------------------------------------------

// BackupFullDatabaseRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool BackupFullDatabaseRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool BackupFullDatabaseRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& BackupFullDatabaseRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& BackupFullDatabaseRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.UserInfo)
  return _internal_userinfo();
}
inline void BackupFullDatabaseRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.BackupFullDatabaseRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* BackupFullDatabaseRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* BackupFullDatabaseRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.BackupFullDatabaseRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* BackupFullDatabaseRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* BackupFullDatabaseRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.BackupFullDatabaseRequest.UserInfo)
  return _msg;
}
inline void BackupFullDatabaseRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.BackupFullDatabaseRequest.UserInfo)
}

// bool InstantBackup = 2;
inline void BackupFullDatabaseRequest::clear_instantbackup() {
  _impl_.instantbackup_ = false;
}
inline bool BackupFullDatabaseRequest::_internal_instantbackup() const {
  return _impl_.instantbackup_;
}
inline bool BackupFullDatabaseRequest::instantbackup() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.InstantBackup)
  return _internal_instantbackup();
}
inline void BackupFullDatabaseRequest::_internal_set_instantbackup(bool value) {
  
  _impl_.instantbackup_ = value;
}
inline void BackupFullDatabaseRequest::set_instantbackup(bool value) {
  _internal_set_instantbackup(value);
  // @@protoc_insertion_point(field_set:proto.BackupFullDatabaseRequest.InstantBackup)
}

// .google.protobuf.Timestamp DelayBackupTime = 3;
inline bool BackupFullDatabaseRequest::_internal_has_delaybackuptime() const {
  return this != internal_default_instance() && _impl_.delaybackuptime_ != nullptr;
}
inline bool BackupFullDatabaseRequest::has_delaybackuptime() const {
  return _internal_has_delaybackuptime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupFullDatabaseRequest::_internal_delaybackuptime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delaybackuptime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupFullDatabaseRequest::delaybackuptime() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.DelayBackupTime)
  return _internal_delaybackuptime();
}
inline void BackupFullDatabaseRequest::unsafe_arena_set_allocated_delaybackuptime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delaybackuptime_);
  }
  _impl_.delaybackuptime_ = delaybackuptime;
  if (delaybackuptime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.BackupFullDatabaseRequest.DelayBackupTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::release_delaybackuptime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delaybackuptime_;
  _impl_.delaybackuptime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::unsafe_arena_release_delaybackuptime() {
  // @@protoc_insertion_point(field_release:proto.BackupFullDatabaseRequest.DelayBackupTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delaybackuptime_;
  _impl_.delaybackuptime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::_internal_mutable_delaybackuptime() {
  
  if (_impl_.delaybackuptime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delaybackuptime_ = p;
  }
  return _impl_.delaybackuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::mutable_delaybackuptime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delaybackuptime();
  // @@protoc_insertion_point(field_mutable:proto.BackupFullDatabaseRequest.DelayBackupTime)
  return _msg;
}
inline void BackupFullDatabaseRequest::set_allocated_delaybackuptime(::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delaybackuptime_);
  }
  if (delaybackuptime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delaybackuptime));
    if (message_arena != submessage_arena) {
      delaybackuptime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delaybackuptime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delaybackuptime_ = delaybackuptime;
  // @@protoc_insertion_point(field_set_allocated:proto.BackupFullDatabaseRequest.DelayBackupTime)
}

// -------------------------------------------------------------------

// CreateDailyStatisticsRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool CreateDailyStatisticsRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateDailyStatisticsRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateDailyStatisticsRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateDailyStatisticsRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsRequest.UserInfo)
  return _internal_userinfo();
}
inline void CreateDailyStatisticsRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateDailyStatisticsRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateDailyStatisticsRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateDailyStatisticsRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateDailyStatisticsRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsRequest.UserInfo)
  return _msg;
}
inline void CreateDailyStatisticsRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsRequest.UserInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool CreateDailyStatisticsRequest::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool CreateDailyStatisticsRequest::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& CreateDailyStatisticsRequest::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& CreateDailyStatisticsRequest::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void CreateDailyStatisticsRequest::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
  return _msg;
}
inline void CreateDailyStatisticsRequest::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// DeleteDailyStatisticsRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool DeleteDailyStatisticsRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool DeleteDailyStatisticsRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& DeleteDailyStatisticsRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& DeleteDailyStatisticsRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsRequest.UserInfo)
  return _internal_userinfo();
}
inline void DeleteDailyStatisticsRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteDailyStatisticsRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* DeleteDailyStatisticsRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteDailyStatisticsRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* DeleteDailyStatisticsRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* DeleteDailyStatisticsRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsRequest.UserInfo)
  return _msg;
}
inline void DeleteDailyStatisticsRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsRequest.UserInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool DeleteDailyStatisticsRequest::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool DeleteDailyStatisticsRequest::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& DeleteDailyStatisticsRequest::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& DeleteDailyStatisticsRequest::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsRequest.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void DeleteDailyStatisticsRequest::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteDailyStatisticsRequest.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsRequest::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsRequest::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsRequest.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsRequest::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsRequest::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsRequest.DailyStatisticsInfo)
  return _msg;
}
inline void DeleteDailyStatisticsRequest::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsRequest.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// UpdateDailyStatisticsRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool UpdateDailyStatisticsRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateDailyStatisticsRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateDailyStatisticsRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateDailyStatisticsRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsRequest.UserInfo)
  return _internal_userinfo();
}
inline void UpdateDailyStatisticsRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateDailyStatisticsRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateDailyStatisticsRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateDailyStatisticsRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateDailyStatisticsRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsRequest.UserInfo)
  return _msg;
}
inline void UpdateDailyStatisticsRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsRequest.UserInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool UpdateDailyStatisticsRequest::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool UpdateDailyStatisticsRequest::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& UpdateDailyStatisticsRequest::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& UpdateDailyStatisticsRequest::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void UpdateDailyStatisticsRequest::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
  return _msg;
}
inline void UpdateDailyStatisticsRequest::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// GetDailyStatisticsRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetDailyStatisticsRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetDailyStatisticsRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetDailyStatisticsRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetDailyStatisticsRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetDailyStatisticsRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetDailyStatisticsRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetDailyStatisticsRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetDailyStatisticsRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetDailyStatisticsRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetDailyStatisticsRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsRequest.UserInfo)
  return _msg;
}
inline void GetDailyStatisticsRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsRequest.UserInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool GetDailyStatisticsRequest::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool GetDailyStatisticsRequest::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& GetDailyStatisticsRequest::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& GetDailyStatisticsRequest::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsRequest.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void GetDailyStatisticsRequest::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetDailyStatisticsRequest.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsRequest::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsRequest::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsRequest.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsRequest::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsRequest::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsRequest.DailyStatisticsInfo)
  return _msg;
}
inline void GetDailyStatisticsRequest::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsRequest.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// GetAllDailyStatisticsRequest

// .proto.UserMetaInfoV1 UserInfo = 1;
inline bool GetAllDailyStatisticsRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetAllDailyStatisticsRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetAllDailyStatisticsRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetAllDailyStatisticsRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllDailyStatisticsRequest.UserInfo)
  return _internal_userinfo();
}
inline void GetAllDailyStatisticsRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllDailyStatisticsRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetAllDailyStatisticsRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllDailyStatisticsRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllDailyStatisticsRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetAllDailyStatisticsRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetAllDailyStatisticsRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllDailyStatisticsRequest.UserInfo)
  return _msg;
}
inline void GetAllDailyStatisticsRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllDailyStatisticsRequest.UserInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2fRequest_2eproto
