// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: Service/Service.proto

package service

import (
	request "DBMS/Generated/proto/request"
	response "DBMS/Generated/proto/response"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DBMS_CreateUser_FullMethodName                       = "/proto.DBMS/CreateUser"
	DBMS_DeleteUser_FullMethodName                       = "/proto.DBMS/DeleteUser"
	DBMS_UpdateUser_FullMethodName                       = "/proto.DBMS/UpdateUser"
	DBMS_GetUser_FullMethodName                          = "/proto.DBMS/GetUser"
	DBMS_GetAllUser_FullMethodName                       = "/proto.DBMS/GetAllUser"
	DBMS_UserLogin_FullMethodName                        = "/proto.DBMS/UserLogin"
	DBMS_UserLogout_FullMethodName                       = "/proto.DBMS/UserLogout"
	DBMS_UserOnlineHeartBeatNotifications_FullMethodName = "/proto.DBMS/UserOnlineHeartBeatNotifications"
	DBMS_GetUserPermissionGroup_FullMethodName           = "/proto.DBMS/GetUserPermissionGroup"
	DBMS_GetPermissionGroup_FullMethodName               = "/proto.DBMS/GetPermissionGroup"
	DBMS_GetAllPermissionGroup_FullMethodName            = "/proto.DBMS/GetAllPermissionGroup"
	DBMS_ChangeUserPermissionGroup_FullMethodName        = "/proto.DBMS/ChangeUserPermissionGroup"
	DBMS_CreateProject_FullMethodName                    = "/proto.DBMS/CreateProject"
	DBMS_DeleteProject_FullMethodName                    = "/proto.DBMS/DeleteProject"
	DBMS_UpdateProject_FullMethodName                    = "/proto.DBMS/UpdateProject"
	DBMS_GetProject_FullMethodName                       = "/proto.DBMS/GetProject"
	DBMS_GetAllProject_FullMethodName                    = "/proto.DBMS/GetAllProject"
	DBMS_CreateSwc_FullMethodName                        = "/proto.DBMS/CreateSwc"
	DBMS_DeleteSwc_FullMethodName                        = "/proto.DBMS/DeleteSwc"
	DBMS_UpdateSwc_FullMethodName                        = "/proto.DBMS/UpdateSwc"
	DBMS_GetSwcMetaInfo_FullMethodName                   = "/proto.DBMS/GetSwcMetaInfo"
	DBMS_GetAllSwcMetaInfo_FullMethodName                = "/proto.DBMS/GetAllSwcMetaInfo"
	DBMS_CreateSwcNodeData_FullMethodName                = "/proto.DBMS/CreateSwcNodeData"
	DBMS_DeleteSwcNodeData_FullMethodName                = "/proto.DBMS/DeleteSwcNodeData"
	DBMS_UpdateSwcNodeData_FullMethodName                = "/proto.DBMS/UpdateSwcNodeData"
	DBMS_GetSwcNodeData_FullMethodName                   = "/proto.DBMS/GetSwcNodeData"
	DBMS_GetSwcFullNodeData_FullMethodName               = "/proto.DBMS/GetSwcFullNodeData"
	DBMS_GetSwcNodeDataListByTimeAndUser_FullMethodName  = "/proto.DBMS/GetSwcNodeDataListByTimeAndUser"
	DBMS_BackupFullDatabase_FullMethodName               = "/proto.DBMS/BackupFullDatabase"
	DBMS_CreateDailyStatistics_FullMethodName            = "/proto.DBMS/CreateDailyStatistics"
	DBMS_DeleteDailyStatistics_FullMethodName            = "/proto.DBMS/DeleteDailyStatistics"
	DBMS_UpdateDailyStatistics_FullMethodName            = "/proto.DBMS/UpdateDailyStatistics"
	DBMS_GetDailyStatistics_FullMethodName               = "/proto.DBMS/GetDailyStatistics"
	DBMS_GetAllDailyStatistics_FullMethodName            = "/proto.DBMS/GetAllDailyStatistics"
)

// DBMSClient is the client API for DBMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBMSClient interface {
	CreateUser(ctx context.Context, in *request.CreateUserRequest, opts ...grpc.CallOption) (*response.CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *request.DeleteUserRequest, opts ...grpc.CallOption) (*response.DeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *request.UpdateUserRequest, opts ...grpc.CallOption) (*response.UpdateUserResponse, error)
	GetUser(ctx context.Context, in *request.GetUserRequest, opts ...grpc.CallOption) (*response.GetUserResponse, error)
	GetAllUser(ctx context.Context, in *request.GetAllUserRequest, opts ...grpc.CallOption) (*response.GetAllUserResponse, error)
	UserLogin(ctx context.Context, in *request.UserLoginRequest, opts ...grpc.CallOption) (*response.UserLoginResponse, error)
	UserLogout(ctx context.Context, in *request.UserLogoutRequest, opts ...grpc.CallOption) (*response.UserLogoutResponse, error)
	UserOnlineHeartBeatNotifications(ctx context.Context, in *request.UserOnlineHeartBeatNotification, opts ...grpc.CallOption) (*response.UserOnlineHeartBeatResponse, error)
	GetUserPermissionGroup(ctx context.Context, in *request.GetUserPermissionGroupRequest, opts ...grpc.CallOption) (*response.GetUserPermissionGroupResponse, error)
	GetPermissionGroup(ctx context.Context, in *request.GetPermissionGroupRequest, opts ...grpc.CallOption) (*response.GetPermissionGroupResponse, error)
	GetAllPermissionGroup(ctx context.Context, in *request.GetAllPermissionGroupRequest, opts ...grpc.CallOption) (*response.GetAllPermissionGroupResponse, error)
	ChangeUserPermissionGroup(ctx context.Context, in *request.ChangeUserPermissionGroupRequest, opts ...grpc.CallOption) (*response.ChangeUserPermissionGroupResponse, error)
	CreateProject(ctx context.Context, in *request.CreateProjectRequest, opts ...grpc.CallOption) (*response.CreateProjectResponse, error)
	DeleteProject(ctx context.Context, in *request.DeleteProjectRequest, opts ...grpc.CallOption) (*response.DeleteProjectResponse, error)
	UpdateProject(ctx context.Context, in *request.UpdateProjectRequest, opts ...grpc.CallOption) (*response.UpdateProjectResponse, error)
	GetProject(ctx context.Context, in *request.GetProjectRequest, opts ...grpc.CallOption) (*response.GetProjectResponse, error)
	GetAllProject(ctx context.Context, in *request.GetAllProjectRequest, opts ...grpc.CallOption) (*response.GetAllProjectResponse, error)
	CreateSwc(ctx context.Context, in *request.CreateSwcRequest, opts ...grpc.CallOption) (*response.CreateSwcResponse, error)
	DeleteSwc(ctx context.Context, in *request.DeleteSwcRequest, opts ...grpc.CallOption) (*response.DeleteSwcResponse, error)
	UpdateSwc(ctx context.Context, in *request.UpdateSwcRequest, opts ...grpc.CallOption) (*response.UpdateSwcResponse, error)
	GetSwcMetaInfo(ctx context.Context, in *request.GetSwcMetaInfoRequest, opts ...grpc.CallOption) (*response.GetSwcMetaInfoResponse, error)
	GetAllSwcMetaInfo(ctx context.Context, in *request.GetAllSwcMetaInfoRequest, opts ...grpc.CallOption) (*response.GetAllSwcMetaInfoResponse, error)
	CreateSwcNodeData(ctx context.Context, in *request.CreateSwcNodeDataRequest, opts ...grpc.CallOption) (*response.CreateSwcNodeDataResponse, error)
	DeleteSwcNodeData(ctx context.Context, in *request.DeleteSwcNodeDataRequest, opts ...grpc.CallOption) (*response.DeleteSwcNodeDataResponse, error)
	UpdateSwcNodeData(ctx context.Context, in *request.UpdateSwcNodeDataRequest, opts ...grpc.CallOption) (*response.UpdateSwcNodeDataResponse, error)
	GetSwcNodeData(ctx context.Context, in *request.GetSwcNodeDataRequest, opts ...grpc.CallOption) (*response.GetSwcNodeDataResponse, error)
	GetSwcFullNodeData(ctx context.Context, in *request.GetSwcFullNodeDataRequest, opts ...grpc.CallOption) (*response.GetSwcFullNodeDataResponse, error)
	GetSwcNodeDataListByTimeAndUser(ctx context.Context, in *request.GetSwcNodeDataListByTimeAndUserRequest, opts ...grpc.CallOption) (*response.GetSwcNodeDataListByTimeAndUserResponse, error)
	BackupFullDatabase(ctx context.Context, in *request.BackupFullDatabaseRequest, opts ...grpc.CallOption) (*response.BackupFullDatabaseResponse, error)
	CreateDailyStatistics(ctx context.Context, in *request.CreateDailyStatisticsRequest, opts ...grpc.CallOption) (*response.CreateDailyStatisticsResponse, error)
	DeleteDailyStatistics(ctx context.Context, in *request.DeleteDailyStatisticsRequest, opts ...grpc.CallOption) (*response.DeleteDailyStatisticsResponse, error)
	UpdateDailyStatistics(ctx context.Context, in *request.UpdateDailyStatisticsRequest, opts ...grpc.CallOption) (*response.UpdateDailyStatisticsResponse, error)
	GetDailyStatistics(ctx context.Context, in *request.GetDailyStatisticsRequest, opts ...grpc.CallOption) (*response.GetDailyStatisticsResponse, error)
	GetAllDailyStatistics(ctx context.Context, in *request.GetAllDailyStatisticsRequest, opts ...grpc.CallOption) (*response.GetAllDailyStatisticsResponse, error)
}

type dBMSClient struct {
	cc grpc.ClientConnInterface
}

func NewDBMSClient(cc grpc.ClientConnInterface) DBMSClient {
	return &dBMSClient{cc}
}

func (c *dBMSClient) CreateUser(ctx context.Context, in *request.CreateUserRequest, opts ...grpc.CallOption) (*response.CreateUserResponse, error) {
	out := new(response.CreateUserResponse)
	err := c.cc.Invoke(ctx, DBMS_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) DeleteUser(ctx context.Context, in *request.DeleteUserRequest, opts ...grpc.CallOption) (*response.DeleteUserResponse, error) {
	out := new(response.DeleteUserResponse)
	err := c.cc.Invoke(ctx, DBMS_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UpdateUser(ctx context.Context, in *request.UpdateUserRequest, opts ...grpc.CallOption) (*response.UpdateUserResponse, error) {
	out := new(response.UpdateUserResponse)
	err := c.cc.Invoke(ctx, DBMS_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetUser(ctx context.Context, in *request.GetUserRequest, opts ...grpc.CallOption) (*response.GetUserResponse, error) {
	out := new(response.GetUserResponse)
	err := c.cc.Invoke(ctx, DBMS_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetAllUser(ctx context.Context, in *request.GetAllUserRequest, opts ...grpc.CallOption) (*response.GetAllUserResponse, error) {
	out := new(response.GetAllUserResponse)
	err := c.cc.Invoke(ctx, DBMS_GetAllUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UserLogin(ctx context.Context, in *request.UserLoginRequest, opts ...grpc.CallOption) (*response.UserLoginResponse, error) {
	out := new(response.UserLoginResponse)
	err := c.cc.Invoke(ctx, DBMS_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UserLogout(ctx context.Context, in *request.UserLogoutRequest, opts ...grpc.CallOption) (*response.UserLogoutResponse, error) {
	out := new(response.UserLogoutResponse)
	err := c.cc.Invoke(ctx, DBMS_UserLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UserOnlineHeartBeatNotifications(ctx context.Context, in *request.UserOnlineHeartBeatNotification, opts ...grpc.CallOption) (*response.UserOnlineHeartBeatResponse, error) {
	out := new(response.UserOnlineHeartBeatResponse)
	err := c.cc.Invoke(ctx, DBMS_UserOnlineHeartBeatNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetUserPermissionGroup(ctx context.Context, in *request.GetUserPermissionGroupRequest, opts ...grpc.CallOption) (*response.GetUserPermissionGroupResponse, error) {
	out := new(response.GetUserPermissionGroupResponse)
	err := c.cc.Invoke(ctx, DBMS_GetUserPermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetPermissionGroup(ctx context.Context, in *request.GetPermissionGroupRequest, opts ...grpc.CallOption) (*response.GetPermissionGroupResponse, error) {
	out := new(response.GetPermissionGroupResponse)
	err := c.cc.Invoke(ctx, DBMS_GetPermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetAllPermissionGroup(ctx context.Context, in *request.GetAllPermissionGroupRequest, opts ...grpc.CallOption) (*response.GetAllPermissionGroupResponse, error) {
	out := new(response.GetAllPermissionGroupResponse)
	err := c.cc.Invoke(ctx, DBMS_GetAllPermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) ChangeUserPermissionGroup(ctx context.Context, in *request.ChangeUserPermissionGroupRequest, opts ...grpc.CallOption) (*response.ChangeUserPermissionGroupResponse, error) {
	out := new(response.ChangeUserPermissionGroupResponse)
	err := c.cc.Invoke(ctx, DBMS_ChangeUserPermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) CreateProject(ctx context.Context, in *request.CreateProjectRequest, opts ...grpc.CallOption) (*response.CreateProjectResponse, error) {
	out := new(response.CreateProjectResponse)
	err := c.cc.Invoke(ctx, DBMS_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) DeleteProject(ctx context.Context, in *request.DeleteProjectRequest, opts ...grpc.CallOption) (*response.DeleteProjectResponse, error) {
	out := new(response.DeleteProjectResponse)
	err := c.cc.Invoke(ctx, DBMS_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UpdateProject(ctx context.Context, in *request.UpdateProjectRequest, opts ...grpc.CallOption) (*response.UpdateProjectResponse, error) {
	out := new(response.UpdateProjectResponse)
	err := c.cc.Invoke(ctx, DBMS_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetProject(ctx context.Context, in *request.GetProjectRequest, opts ...grpc.CallOption) (*response.GetProjectResponse, error) {
	out := new(response.GetProjectResponse)
	err := c.cc.Invoke(ctx, DBMS_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetAllProject(ctx context.Context, in *request.GetAllProjectRequest, opts ...grpc.CallOption) (*response.GetAllProjectResponse, error) {
	out := new(response.GetAllProjectResponse)
	err := c.cc.Invoke(ctx, DBMS_GetAllProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) CreateSwc(ctx context.Context, in *request.CreateSwcRequest, opts ...grpc.CallOption) (*response.CreateSwcResponse, error) {
	out := new(response.CreateSwcResponse)
	err := c.cc.Invoke(ctx, DBMS_CreateSwc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) DeleteSwc(ctx context.Context, in *request.DeleteSwcRequest, opts ...grpc.CallOption) (*response.DeleteSwcResponse, error) {
	out := new(response.DeleteSwcResponse)
	err := c.cc.Invoke(ctx, DBMS_DeleteSwc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UpdateSwc(ctx context.Context, in *request.UpdateSwcRequest, opts ...grpc.CallOption) (*response.UpdateSwcResponse, error) {
	out := new(response.UpdateSwcResponse)
	err := c.cc.Invoke(ctx, DBMS_UpdateSwc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetSwcMetaInfo(ctx context.Context, in *request.GetSwcMetaInfoRequest, opts ...grpc.CallOption) (*response.GetSwcMetaInfoResponse, error) {
	out := new(response.GetSwcMetaInfoResponse)
	err := c.cc.Invoke(ctx, DBMS_GetSwcMetaInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetAllSwcMetaInfo(ctx context.Context, in *request.GetAllSwcMetaInfoRequest, opts ...grpc.CallOption) (*response.GetAllSwcMetaInfoResponse, error) {
	out := new(response.GetAllSwcMetaInfoResponse)
	err := c.cc.Invoke(ctx, DBMS_GetAllSwcMetaInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) CreateSwcNodeData(ctx context.Context, in *request.CreateSwcNodeDataRequest, opts ...grpc.CallOption) (*response.CreateSwcNodeDataResponse, error) {
	out := new(response.CreateSwcNodeDataResponse)
	err := c.cc.Invoke(ctx, DBMS_CreateSwcNodeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) DeleteSwcNodeData(ctx context.Context, in *request.DeleteSwcNodeDataRequest, opts ...grpc.CallOption) (*response.DeleteSwcNodeDataResponse, error) {
	out := new(response.DeleteSwcNodeDataResponse)
	err := c.cc.Invoke(ctx, DBMS_DeleteSwcNodeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UpdateSwcNodeData(ctx context.Context, in *request.UpdateSwcNodeDataRequest, opts ...grpc.CallOption) (*response.UpdateSwcNodeDataResponse, error) {
	out := new(response.UpdateSwcNodeDataResponse)
	err := c.cc.Invoke(ctx, DBMS_UpdateSwcNodeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetSwcNodeData(ctx context.Context, in *request.GetSwcNodeDataRequest, opts ...grpc.CallOption) (*response.GetSwcNodeDataResponse, error) {
	out := new(response.GetSwcNodeDataResponse)
	err := c.cc.Invoke(ctx, DBMS_GetSwcNodeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetSwcFullNodeData(ctx context.Context, in *request.GetSwcFullNodeDataRequest, opts ...grpc.CallOption) (*response.GetSwcFullNodeDataResponse, error) {
	out := new(response.GetSwcFullNodeDataResponse)
	err := c.cc.Invoke(ctx, DBMS_GetSwcFullNodeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetSwcNodeDataListByTimeAndUser(ctx context.Context, in *request.GetSwcNodeDataListByTimeAndUserRequest, opts ...grpc.CallOption) (*response.GetSwcNodeDataListByTimeAndUserResponse, error) {
	out := new(response.GetSwcNodeDataListByTimeAndUserResponse)
	err := c.cc.Invoke(ctx, DBMS_GetSwcNodeDataListByTimeAndUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) BackupFullDatabase(ctx context.Context, in *request.BackupFullDatabaseRequest, opts ...grpc.CallOption) (*response.BackupFullDatabaseResponse, error) {
	out := new(response.BackupFullDatabaseResponse)
	err := c.cc.Invoke(ctx, DBMS_BackupFullDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) CreateDailyStatistics(ctx context.Context, in *request.CreateDailyStatisticsRequest, opts ...grpc.CallOption) (*response.CreateDailyStatisticsResponse, error) {
	out := new(response.CreateDailyStatisticsResponse)
	err := c.cc.Invoke(ctx, DBMS_CreateDailyStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) DeleteDailyStatistics(ctx context.Context, in *request.DeleteDailyStatisticsRequest, opts ...grpc.CallOption) (*response.DeleteDailyStatisticsResponse, error) {
	out := new(response.DeleteDailyStatisticsResponse)
	err := c.cc.Invoke(ctx, DBMS_DeleteDailyStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) UpdateDailyStatistics(ctx context.Context, in *request.UpdateDailyStatisticsRequest, opts ...grpc.CallOption) (*response.UpdateDailyStatisticsResponse, error) {
	out := new(response.UpdateDailyStatisticsResponse)
	err := c.cc.Invoke(ctx, DBMS_UpdateDailyStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetDailyStatistics(ctx context.Context, in *request.GetDailyStatisticsRequest, opts ...grpc.CallOption) (*response.GetDailyStatisticsResponse, error) {
	out := new(response.GetDailyStatisticsResponse)
	err := c.cc.Invoke(ctx, DBMS_GetDailyStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) GetAllDailyStatistics(ctx context.Context, in *request.GetAllDailyStatisticsRequest, opts ...grpc.CallOption) (*response.GetAllDailyStatisticsResponse, error) {
	out := new(response.GetAllDailyStatisticsResponse)
	err := c.cc.Invoke(ctx, DBMS_GetAllDailyStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBMSServer is the server API for DBMS service.
// All implementations must embed UnimplementedDBMSServer
// for forward compatibility
type DBMSServer interface {
	CreateUser(context.Context, *request.CreateUserRequest) (*response.CreateUserResponse, error)
	DeleteUser(context.Context, *request.DeleteUserRequest) (*response.DeleteUserResponse, error)
	UpdateUser(context.Context, *request.UpdateUserRequest) (*response.UpdateUserResponse, error)
	GetUser(context.Context, *request.GetUserRequest) (*response.GetUserResponse, error)
	GetAllUser(context.Context, *request.GetAllUserRequest) (*response.GetAllUserResponse, error)
	UserLogin(context.Context, *request.UserLoginRequest) (*response.UserLoginResponse, error)
	UserLogout(context.Context, *request.UserLogoutRequest) (*response.UserLogoutResponse, error)
	UserOnlineHeartBeatNotifications(context.Context, *request.UserOnlineHeartBeatNotification) (*response.UserOnlineHeartBeatResponse, error)
	GetUserPermissionGroup(context.Context, *request.GetUserPermissionGroupRequest) (*response.GetUserPermissionGroupResponse, error)
	GetPermissionGroup(context.Context, *request.GetPermissionGroupRequest) (*response.GetPermissionGroupResponse, error)
	GetAllPermissionGroup(context.Context, *request.GetAllPermissionGroupRequest) (*response.GetAllPermissionGroupResponse, error)
	ChangeUserPermissionGroup(context.Context, *request.ChangeUserPermissionGroupRequest) (*response.ChangeUserPermissionGroupResponse, error)
	CreateProject(context.Context, *request.CreateProjectRequest) (*response.CreateProjectResponse, error)
	DeleteProject(context.Context, *request.DeleteProjectRequest) (*response.DeleteProjectResponse, error)
	UpdateProject(context.Context, *request.UpdateProjectRequest) (*response.UpdateProjectResponse, error)
	GetProject(context.Context, *request.GetProjectRequest) (*response.GetProjectResponse, error)
	GetAllProject(context.Context, *request.GetAllProjectRequest) (*response.GetAllProjectResponse, error)
	CreateSwc(context.Context, *request.CreateSwcRequest) (*response.CreateSwcResponse, error)
	DeleteSwc(context.Context, *request.DeleteSwcRequest) (*response.DeleteSwcResponse, error)
	UpdateSwc(context.Context, *request.UpdateSwcRequest) (*response.UpdateSwcResponse, error)
	GetSwcMetaInfo(context.Context, *request.GetSwcMetaInfoRequest) (*response.GetSwcMetaInfoResponse, error)
	GetAllSwcMetaInfo(context.Context, *request.GetAllSwcMetaInfoRequest) (*response.GetAllSwcMetaInfoResponse, error)
	CreateSwcNodeData(context.Context, *request.CreateSwcNodeDataRequest) (*response.CreateSwcNodeDataResponse, error)
	DeleteSwcNodeData(context.Context, *request.DeleteSwcNodeDataRequest) (*response.DeleteSwcNodeDataResponse, error)
	UpdateSwcNodeData(context.Context, *request.UpdateSwcNodeDataRequest) (*response.UpdateSwcNodeDataResponse, error)
	GetSwcNodeData(context.Context, *request.GetSwcNodeDataRequest) (*response.GetSwcNodeDataResponse, error)
	GetSwcFullNodeData(context.Context, *request.GetSwcFullNodeDataRequest) (*response.GetSwcFullNodeDataResponse, error)
	GetSwcNodeDataListByTimeAndUser(context.Context, *request.GetSwcNodeDataListByTimeAndUserRequest) (*response.GetSwcNodeDataListByTimeAndUserResponse, error)
	BackupFullDatabase(context.Context, *request.BackupFullDatabaseRequest) (*response.BackupFullDatabaseResponse, error)
	CreateDailyStatistics(context.Context, *request.CreateDailyStatisticsRequest) (*response.CreateDailyStatisticsResponse, error)
	DeleteDailyStatistics(context.Context, *request.DeleteDailyStatisticsRequest) (*response.DeleteDailyStatisticsResponse, error)
	UpdateDailyStatistics(context.Context, *request.UpdateDailyStatisticsRequest) (*response.UpdateDailyStatisticsResponse, error)
	GetDailyStatistics(context.Context, *request.GetDailyStatisticsRequest) (*response.GetDailyStatisticsResponse, error)
	GetAllDailyStatistics(context.Context, *request.GetAllDailyStatisticsRequest) (*response.GetAllDailyStatisticsResponse, error)
	mustEmbedUnimplementedDBMSServer()
}

// UnimplementedDBMSServer must be embedded to have forward compatible implementations.
type UnimplementedDBMSServer struct {
}

func (UnimplementedDBMSServer) CreateUser(context.Context, *request.CreateUserRequest) (*response.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDBMSServer) DeleteUser(context.Context, *request.DeleteUserRequest) (*response.DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDBMSServer) UpdateUser(context.Context, *request.UpdateUserRequest) (*response.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDBMSServer) GetUser(context.Context, *request.GetUserRequest) (*response.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDBMSServer) GetAllUser(context.Context, *request.GetAllUserRequest) (*response.GetAllUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedDBMSServer) UserLogin(context.Context, *request.UserLoginRequest) (*response.UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedDBMSServer) UserLogout(context.Context, *request.UserLogoutRequest) (*response.UserLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (UnimplementedDBMSServer) UserOnlineHeartBeatNotifications(context.Context, *request.UserOnlineHeartBeatNotification) (*response.UserOnlineHeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOnlineHeartBeatNotifications not implemented")
}
func (UnimplementedDBMSServer) GetUserPermissionGroup(context.Context, *request.GetUserPermissionGroupRequest) (*response.GetUserPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionGroup not implemented")
}
func (UnimplementedDBMSServer) GetPermissionGroup(context.Context, *request.GetPermissionGroupRequest) (*response.GetPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionGroup not implemented")
}
func (UnimplementedDBMSServer) GetAllPermissionGroup(context.Context, *request.GetAllPermissionGroupRequest) (*response.GetAllPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPermissionGroup not implemented")
}
func (UnimplementedDBMSServer) ChangeUserPermissionGroup(context.Context, *request.ChangeUserPermissionGroupRequest) (*response.ChangeUserPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPermissionGroup not implemented")
}
func (UnimplementedDBMSServer) CreateProject(context.Context, *request.CreateProjectRequest) (*response.CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedDBMSServer) DeleteProject(context.Context, *request.DeleteProjectRequest) (*response.DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedDBMSServer) UpdateProject(context.Context, *request.UpdateProjectRequest) (*response.UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedDBMSServer) GetProject(context.Context, *request.GetProjectRequest) (*response.GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedDBMSServer) GetAllProject(context.Context, *request.GetAllProjectRequest) (*response.GetAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProject not implemented")
}
func (UnimplementedDBMSServer) CreateSwc(context.Context, *request.CreateSwcRequest) (*response.CreateSwcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwc not implemented")
}
func (UnimplementedDBMSServer) DeleteSwc(context.Context, *request.DeleteSwcRequest) (*response.DeleteSwcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSwc not implemented")
}
func (UnimplementedDBMSServer) UpdateSwc(context.Context, *request.UpdateSwcRequest) (*response.UpdateSwcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwc not implemented")
}
func (UnimplementedDBMSServer) GetSwcMetaInfo(context.Context, *request.GetSwcMetaInfoRequest) (*response.GetSwcMetaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwcMetaInfo not implemented")
}
func (UnimplementedDBMSServer) GetAllSwcMetaInfo(context.Context, *request.GetAllSwcMetaInfoRequest) (*response.GetAllSwcMetaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSwcMetaInfo not implemented")
}
func (UnimplementedDBMSServer) CreateSwcNodeData(context.Context, *request.CreateSwcNodeDataRequest) (*response.CreateSwcNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwcNodeData not implemented")
}
func (UnimplementedDBMSServer) DeleteSwcNodeData(context.Context, *request.DeleteSwcNodeDataRequest) (*response.DeleteSwcNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSwcNodeData not implemented")
}
func (UnimplementedDBMSServer) UpdateSwcNodeData(context.Context, *request.UpdateSwcNodeDataRequest) (*response.UpdateSwcNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwcNodeData not implemented")
}
func (UnimplementedDBMSServer) GetSwcNodeData(context.Context, *request.GetSwcNodeDataRequest) (*response.GetSwcNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwcNodeData not implemented")
}
func (UnimplementedDBMSServer) GetSwcFullNodeData(context.Context, *request.GetSwcFullNodeDataRequest) (*response.GetSwcFullNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwcFullNodeData not implemented")
}
func (UnimplementedDBMSServer) GetSwcNodeDataListByTimeAndUser(context.Context, *request.GetSwcNodeDataListByTimeAndUserRequest) (*response.GetSwcNodeDataListByTimeAndUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwcNodeDataListByTimeAndUser not implemented")
}
func (UnimplementedDBMSServer) BackupFullDatabase(context.Context, *request.BackupFullDatabaseRequest) (*response.BackupFullDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupFullDatabase not implemented")
}
func (UnimplementedDBMSServer) CreateDailyStatistics(context.Context, *request.CreateDailyStatisticsRequest) (*response.CreateDailyStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDailyStatistics not implemented")
}
func (UnimplementedDBMSServer) DeleteDailyStatistics(context.Context, *request.DeleteDailyStatisticsRequest) (*response.DeleteDailyStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDailyStatistics not implemented")
}
func (UnimplementedDBMSServer) UpdateDailyStatistics(context.Context, *request.UpdateDailyStatisticsRequest) (*response.UpdateDailyStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDailyStatistics not implemented")
}
func (UnimplementedDBMSServer) GetDailyStatistics(context.Context, *request.GetDailyStatisticsRequest) (*response.GetDailyStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyStatistics not implemented")
}
func (UnimplementedDBMSServer) GetAllDailyStatistics(context.Context, *request.GetAllDailyStatisticsRequest) (*response.GetAllDailyStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDailyStatistics not implemented")
}
func (UnimplementedDBMSServer) mustEmbedUnimplementedDBMSServer() {}

// UnsafeDBMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBMSServer will
// result in compilation errors.
type UnsafeDBMSServer interface {
	mustEmbedUnimplementedDBMSServer()
}

func RegisterDBMSServer(s grpc.ServiceRegistrar, srv DBMSServer) {
	s.RegisterService(&DBMS_ServiceDesc, srv)
}

func _DBMS_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).CreateUser(ctx, req.(*request.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).DeleteUser(ctx, req.(*request.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UpdateUser(ctx, req.(*request.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetUser(ctx, req.(*request.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetAllUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetAllUser(ctx, req.(*request.GetAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UserLogin(ctx, req.(*request.UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UserLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UserLogout(ctx, req.(*request.UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UserOnlineHeartBeatNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UserOnlineHeartBeatNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UserOnlineHeartBeatNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UserOnlineHeartBeatNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UserOnlineHeartBeatNotifications(ctx, req.(*request.UserOnlineHeartBeatNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetUserPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetUserPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetUserPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetUserPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetUserPermissionGroup(ctx, req.(*request.GetUserPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetPermissionGroup(ctx, req.(*request.GetPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetAllPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetAllPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetAllPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetAllPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetAllPermissionGroup(ctx, req.(*request.GetAllPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_ChangeUserPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ChangeUserPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).ChangeUserPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_ChangeUserPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).ChangeUserPermissionGroup(ctx, req.(*request.ChangeUserPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).CreateProject(ctx, req.(*request.CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).DeleteProject(ctx, req.(*request.DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UpdateProject(ctx, req.(*request.UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetProject(ctx, req.(*request.GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetAllProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetAllProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetAllProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetAllProject(ctx, req.(*request.GetAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_CreateSwc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateSwcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).CreateSwc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_CreateSwc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).CreateSwc(ctx, req.(*request.CreateSwcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_DeleteSwc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteSwcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).DeleteSwc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_DeleteSwc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).DeleteSwc(ctx, req.(*request.DeleteSwcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UpdateSwc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateSwcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UpdateSwc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UpdateSwc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UpdateSwc(ctx, req.(*request.UpdateSwcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetSwcMetaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetSwcMetaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetSwcMetaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetSwcMetaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetSwcMetaInfo(ctx, req.(*request.GetSwcMetaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetAllSwcMetaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetAllSwcMetaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetAllSwcMetaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetAllSwcMetaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetAllSwcMetaInfo(ctx, req.(*request.GetAllSwcMetaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_CreateSwcNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateSwcNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).CreateSwcNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_CreateSwcNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).CreateSwcNodeData(ctx, req.(*request.CreateSwcNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_DeleteSwcNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteSwcNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).DeleteSwcNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_DeleteSwcNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).DeleteSwcNodeData(ctx, req.(*request.DeleteSwcNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UpdateSwcNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateSwcNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UpdateSwcNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UpdateSwcNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UpdateSwcNodeData(ctx, req.(*request.UpdateSwcNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetSwcNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetSwcNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetSwcNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetSwcNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetSwcNodeData(ctx, req.(*request.GetSwcNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetSwcFullNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetSwcFullNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetSwcFullNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetSwcFullNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetSwcFullNodeData(ctx, req.(*request.GetSwcFullNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetSwcNodeDataListByTimeAndUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetSwcNodeDataListByTimeAndUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetSwcNodeDataListByTimeAndUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetSwcNodeDataListByTimeAndUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetSwcNodeDataListByTimeAndUser(ctx, req.(*request.GetSwcNodeDataListByTimeAndUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_BackupFullDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.BackupFullDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).BackupFullDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_BackupFullDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).BackupFullDatabase(ctx, req.(*request.BackupFullDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_CreateDailyStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDailyStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).CreateDailyStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_CreateDailyStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).CreateDailyStatistics(ctx, req.(*request.CreateDailyStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_DeleteDailyStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteDailyStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).DeleteDailyStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_DeleteDailyStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).DeleteDailyStatistics(ctx, req.(*request.DeleteDailyStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_UpdateDailyStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateDailyStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).UpdateDailyStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_UpdateDailyStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).UpdateDailyStatistics(ctx, req.(*request.UpdateDailyStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetDailyStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetDailyStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetDailyStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetDailyStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetDailyStatistics(ctx, req.(*request.GetDailyStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_GetAllDailyStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetAllDailyStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetAllDailyStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMS_GetAllDailyStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetAllDailyStatistics(ctx, req.(*request.GetAllDailyStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBMS_ServiceDesc is the grpc.ServiceDesc for DBMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DBMS",
	HandlerType: (*DBMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DBMS_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _DBMS_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DBMS_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DBMS_GetUser_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _DBMS_GetAllUser_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _DBMS_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _DBMS_UserLogout_Handler,
		},
		{
			MethodName: "UserOnlineHeartBeatNotifications",
			Handler:    _DBMS_UserOnlineHeartBeatNotifications_Handler,
		},
		{
			MethodName: "GetUserPermissionGroup",
			Handler:    _DBMS_GetUserPermissionGroup_Handler,
		},
		{
			MethodName: "GetPermissionGroup",
			Handler:    _DBMS_GetPermissionGroup_Handler,
		},
		{
			MethodName: "GetAllPermissionGroup",
			Handler:    _DBMS_GetAllPermissionGroup_Handler,
		},
		{
			MethodName: "ChangeUserPermissionGroup",
			Handler:    _DBMS_ChangeUserPermissionGroup_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _DBMS_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _DBMS_DeleteProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _DBMS_UpdateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _DBMS_GetProject_Handler,
		},
		{
			MethodName: "GetAllProject",
			Handler:    _DBMS_GetAllProject_Handler,
		},
		{
			MethodName: "CreateSwc",
			Handler:    _DBMS_CreateSwc_Handler,
		},
		{
			MethodName: "DeleteSwc",
			Handler:    _DBMS_DeleteSwc_Handler,
		},
		{
			MethodName: "UpdateSwc",
			Handler:    _DBMS_UpdateSwc_Handler,
		},
		{
			MethodName: "GetSwcMetaInfo",
			Handler:    _DBMS_GetSwcMetaInfo_Handler,
		},
		{
			MethodName: "GetAllSwcMetaInfo",
			Handler:    _DBMS_GetAllSwcMetaInfo_Handler,
		},
		{
			MethodName: "CreateSwcNodeData",
			Handler:    _DBMS_CreateSwcNodeData_Handler,
		},
		{
			MethodName: "DeleteSwcNodeData",
			Handler:    _DBMS_DeleteSwcNodeData_Handler,
		},
		{
			MethodName: "UpdateSwcNodeData",
			Handler:    _DBMS_UpdateSwcNodeData_Handler,
		},
		{
			MethodName: "GetSwcNodeData",
			Handler:    _DBMS_GetSwcNodeData_Handler,
		},
		{
			MethodName: "GetSwcFullNodeData",
			Handler:    _DBMS_GetSwcFullNodeData_Handler,
		},
		{
			MethodName: "GetSwcNodeDataListByTimeAndUser",
			Handler:    _DBMS_GetSwcNodeDataListByTimeAndUser_Handler,
		},
		{
			MethodName: "BackupFullDatabase",
			Handler:    _DBMS_BackupFullDatabase_Handler,
		},
		{
			MethodName: "CreateDailyStatistics",
			Handler:    _DBMS_CreateDailyStatistics_Handler,
		},
		{
			MethodName: "DeleteDailyStatistics",
			Handler:    _DBMS_DeleteDailyStatistics_Handler,
		},
		{
			MethodName: "UpdateDailyStatistics",
			Handler:    _DBMS_UpdateDailyStatistics_Handler,
		},
		{
			MethodName: "GetDailyStatistics",
			Handler:    _DBMS_GetDailyStatistics_Handler,
		},
		{
			MethodName: "GetAllDailyStatistics",
			Handler:    _DBMS_GetAllDailyStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Service/Service.proto",
}
